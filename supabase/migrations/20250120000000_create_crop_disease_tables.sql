-- ðŸŒ¾ INFINITY-LEVEL Crop Disease Detection Tables\n-- PRODUCTION-READY schema for 100 million African farmers! ðŸš€\n\n-- Create crop_diseases reference table\nCREATE TABLE IF NOT EXISTS crop_diseases (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    name TEXT NOT NULL,\n    scientific_name TEXT,\n    crop_type TEXT NOT NULL,\n    description TEXT NOT NULL,\n    symptoms TEXT NOT NULL,\n    treatment TEXT NOT NULL,\n    prevention TEXT NOT NULL,\n    severity_level TEXT CHECK (severity_level IN ('low', 'medium', 'high', 'critical')) DEFAULT 'medium',\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Create disease_images table for reference gallery\nCREATE TABLE IF NOT EXISTS disease_images (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    disease_id UUID REFERENCES crop_diseases(id) ON DELETE CASCADE,\n    url TEXT NOT NULL,\n    alt_text TEXT,\n    severity TEXT CHECK (severity IN ('low', 'medium', 'high')) DEFAULT 'medium',\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Create crop_disease_detections table for user detection history\nCREATE TABLE IF NOT EXISTS crop_disease_detections (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,\n    field_id UUID REFERENCES fields(id) ON DELETE SET NULL,\n    crop_type TEXT NOT NULL,\n    disease_name TEXT NOT NULL,\n    scientific_name TEXT,\n    confidence INTEGER CHECK (confidence >= 0 AND confidence <= 100) NOT NULL,\n    severity TEXT CHECK (severity IN ('low', 'medium', 'high', 'critical')) NOT NULL,\n    affected_area_percentage INTEGER CHECK (affected_area_percentage >= 0 AND affected_area_percentage <= 100),\n    image_url TEXT,\n    location JSONB, -- {lat: number, lng: number, country?: string, region?: string}\n    symptoms TEXT[],\n    immediate_actions TEXT[],\n    preventive_measures TEXT[],\n    organic_solutions TEXT[],\n    inorganic_solutions TEXT[],\n    recommended_products TEXT[],\n    economic_impact JSONB, -- {yield_loss_percentage: number, revenue_loss_usd: number, treatment_cost_usd: number}\n    local_suppliers JSONB[], -- Array of supplier objects\n    recovery_timeline TEXT,\n    spread_risk TEXT CHECK (spread_risk IN ('low', 'medium', 'high')) DEFAULT 'medium',\n    source_api TEXT CHECK (source_api IN ('plantnet', 'gemini', 'fallback')) DEFAULT 'fallback',\n    status TEXT CHECK (status IN ('pending', 'confirmed', 'treated')) DEFAULT 'pending',\n    treatment_recommendations TEXT,\n    result_data JSONB, -- Complete detection result for detailed view\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Create indexes for performance\nCREATE INDEX IF NOT EXISTS idx_crop_diseases_crop_type ON crop_diseases(crop_type);\nCREATE INDEX IF NOT EXISTS idx_crop_diseases_name ON crop_diseases(name);\nCREATE INDEX IF NOT EXISTS idx_disease_images_disease_id ON disease_images(disease_id);\nCREATE INDEX IF NOT EXISTS idx_crop_disease_detections_user_id ON crop_disease_detections(user_id);\nCREATE INDEX IF NOT EXISTS idx_crop_disease_detections_created_at ON crop_disease_detections(created_at DESC);\nCREATE INDEX IF NOT EXISTS idx_crop_disease_detections_crop_type ON crop_disease_detections(crop_type);\nCREATE INDEX IF NOT EXISTS idx_crop_disease_detections_status ON crop_disease_detections(status);\nCREATE INDEX IF NOT EXISTS idx_crop_disease_detections_field_id ON crop_disease_detections(field_id);\n\n-- Enable Row Level Security (RLS)\nALTER TABLE crop_diseases ENABLE ROW LEVEL SECURITY;\nALTER TABLE disease_images ENABLE ROW LEVEL SECURITY;\nALTER TABLE crop_disease_detections ENABLE ROW LEVEL SECURITY;\n\n-- RLS Policies for crop_diseases (public read access)\nCREATE POLICY \"crop_diseases_select_policy\" ON crop_diseases\n    FOR SELECT USING (true); -- Public read access for reference data\n\n-- RLS Policies for disease_images (public read access)\nCREATE POLICY \"disease_images_select_policy\" ON disease_images\n    FOR SELECT USING (true); -- Public read access for reference images\n\n-- RLS Policies for crop_disease_detections (user-specific access)\nCREATE POLICY \"crop_disease_detections_select_policy\" ON crop_disease_detections\n    FOR SELECT USING (auth.uid() = user_id);\n\nCREATE POLICY \"crop_disease_detections_insert_policy\" ON crop_disease_detections\n    FOR INSERT WITH CHECK (auth.uid() = user_id);\n\nCREATE POLICY \"crop_disease_detections_update_policy\" ON crop_disease_detections\n    FOR UPDATE USING (auth.uid() = user_id);\n\nCREATE POLICY \"crop_disease_detections_delete_policy\" ON crop_disease_detections\n    FOR DELETE USING (auth.uid() = user_id);\n\n-- Create storage bucket for disease images\nINSERT INTO storage.buckets (id, name, public)\nVALUES ('disease-images', 'disease-images', true)\nON CONFLICT (id) DO NOTHING;\n\n-- Storage policies for disease images\nCREATE POLICY \"disease_images_upload_policy\" ON storage.objects\n    FOR INSERT WITH CHECK (\n        bucket_id = 'disease-images' AND\n        auth.role() = 'authenticated'\n    );\n\nCREATE POLICY \"disease_images_select_policy\" ON storage.objects\n    FOR SELECT USING (bucket_id = 'disease-images');\n\nCREATE POLICY \"disease_images_delete_policy\" ON storage.objects\n    FOR DELETE USING (\n        bucket_id = 'disease-images' AND\n        auth.uid()::text = (storage.foldername(name))[1]\n    );\n\n-- Insert sample disease data for African crops\nINSERT INTO crop_diseases (name, scientific_name, crop_type, description, symptoms, treatment, prevention, severity_level)\nVALUES \n    (\n        'Northern Leaf Blight',\n        'Exserohilum turcicum',\n        'Maize',\n        'A fungal disease that affects maize crops, causing long, narrow lesions on leaves. It is one of the most common and destructive diseases of maize worldwide, particularly in warm, humid conditions.',\n        'Long, elliptical gray-green or tan lesions on the leaves. Lesions may have dark borders and can coalesce to kill entire leaves. Severe infections can reduce photosynthesis and grain yield.',\n        'Apply fungicide containing azoxystrobin, propiconazole, or tebuconazole. Remove infected plant debris and practice crop rotation with non-host crops.',\n        'Plant resistant varieties, maintain proper plant spacing for air circulation, avoid overhead irrigation, and remove crop residues after harvest.',\n        'high'\n    ),\n    (\n        'Early Blight',\n        'Alternaria solani',\n        'Tomato',\n        'A fungal disease affecting tomatoes and other solanaceous crops, causing dark spots with concentric rings on leaves and fruits. It thrives in warm, humid conditions.',\n        'Dark brown spots with concentric rings (target spots) on lower leaves. Yellowing and dropping of affected leaves. Dark, sunken spots on fruits with concentric rings.',\n        'Apply copper-based fungicide, chlorothalonil, or mancozeb. Remove infected leaves and improve air circulation around plants. Avoid overhead watering.',\n        'Mulch around plants, avoid overhead watering, provide adequate spacing, remove plant debris at season end, and rotate crops.',\n        'medium'\n    ),\n    (\n        'Cassava Mosaic Virus',\n        'Cassava mosaic virus',\n        'Cassava',\n        'A viral disease affecting cassava, causing mottled and distorted leaves. It is transmitted by whiteflies and infected planting material, significantly reducing root yield.',\n        'Mottled yellow and green patches on leaves, leaf distortion, stunted growth, reduced root yield, and premature leaf drop.',\n        'Remove infected plants immediately. Control whitefly vectors using insecticides like imidacloprid or biological control agents. Use virus-free planting material.',\n        'Use virus-free planting material, control whitefly populations, remove infected plants promptly, and maintain field hygiene.',\n        'high'\n    ),\n    (\n        'Black Sigatoka',\n        'Mycosphaerella fijiensis',\n        'Banana',\n        'A serious fungal disease of bananas and plantains, causing leaf spots that reduce photosynthesis and fruit quality. It is one of the most destructive banana diseases worldwide.',\n        'Small dark spots on leaves that enlarge and develop yellow halos. Severe infections cause premature leaf death, reduced fruit size, and poor fruit quality.',\n        'Apply systemic fungicides like propiconazole, tebuconazole, or azoxystrobin. Remove affected leaves and improve drainage. Use resistant varieties when available.',\n        'Plant resistant varieties, ensure good drainage, maintain proper plant spacing for air circulation, and remove infected leaves promptly.',\n        'high'\n    ),\n    (\n        'Coffee Berry Disease',\n        'Colletotrichum kahawae',\n        'Coffee',\n        'A fungal disease that affects coffee berries, causing significant yield losses in coffee-growing regions. It attacks green coffee berries, causing them to rot or drop prematurely.',\n        'Dark, sunken lesions on green coffee berries. Infected berries may drop prematurely or produce poor-quality beans. Brown to black spots with pink spore masses.',\n        'Apply copper-based fungicides during flowering and fruit development. Remove infected berries. Improve air circulation through pruning.',\n        'Prune for good air circulation, avoid overhead irrigation, harvest ripe berries promptly, and remove infected berries from the field.',\n        'medium'\n    ),\n    (\n        'Rice Blast',\n        'Magnaporthe oryzae',\n        'Rice',\n        'A serious fungal disease of rice that can affect leaves, nodes, and panicles, causing significant yield losses. It is favored by high humidity and moderate temperatures.',\n        'Diamond-shaped lesions with gray centers and brown borders on leaves. Neck rot can cause panicle death. Severe infections can cause complete crop loss.',\n        'Apply fungicides containing tricyclazole, azoxystrobin, or propiconazole. Use resistant varieties when available. Manage water levels properly.',\n        'Avoid excessive nitrogen fertilization, maintain proper water management, use certified disease-free seeds, and plant resistant varieties.',\n        'high'\n    )\nON CONFLICT DO NOTHING;\n\n-- Create function to update updated_at timestamp\nCREATE OR REPLACE FUNCTION update_updated_at_column()\nRETURNS TRIGGER AS $$\nBEGIN\n    NEW.updated_at = NOW();\n    RETURN NEW;\nEND;\n$$ language 'plpgsql';\n\n-- Create triggers for updated_at\nCREATE TRIGGER update_crop_diseases_updated_at\n    BEFORE UPDATE ON crop_diseases\n    FOR EACH ROW\n    EXECUTE FUNCTION update_updated_at_column();\n\nCREATE TRIGGER update_crop_disease_detections_updated_at\n    BEFORE UPDATE ON crop_disease_detections\n    FOR EACH ROW\n    EXECUTE FUNCTION update_updated_at_column();\n\n-- Create function to get user's detection statistics\nCREATE OR REPLACE FUNCTION get_user_detection_stats(user_uuid UUID)\nRETURNS TABLE (\n    total_detections BIGINT,\n    pending_detections BIGINT,\n    confirmed_detections BIGINT,\n    treated_detections BIGINT,\n    avg_confidence NUMERIC,\n    most_common_crop TEXT,\n    most_common_disease TEXT\n) AS $$\nBEGIN\n    RETURN QUERY\n    SELECT \n        COUNT(*) as total_detections,\n        COUNT(*) FILTER (WHERE status = 'pending') as pending_detections,\n        COUNT(*) FILTER (WHERE status = 'confirmed') as confirmed_detections,\n        COUNT(*) FILTER (WHERE status = 'treated') as treated_detections,\n        ROUND(AVG(confidence), 2) as avg_confidence,\n        MODE() WITHIN GROUP (ORDER BY crop_type) as most_common_crop,\n        MODE() WITHIN GROUP (ORDER BY disease_name) as most_common_disease\n    FROM crop_disease_detections\n    WHERE user_id = user_uuid;\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER;\n\n-- Grant execute permission on the function\nGRANT EXECUTE ON FUNCTION get_user_detection_stats(UUID) TO authenticated;\n\nCOMMIT;"