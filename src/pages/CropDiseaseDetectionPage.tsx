/**\n * ðŸŒ¾ INFINITY-LEVEL CropDiseaseDetectionPage Component\n * \n * PRODUCTION-READY page for detecting crop diseases from images\n * with WORLD-CLASS UI/UX for 100 million African farmers! ðŸš€\n */\n\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { DiseaseDetectionResult, DiseaseDetectionResultData } from '@/components/crop-disease/DiseaseDetectionResult';\nimport { useDiseaseDetection } from '@/hooks/use-disease-detection';\nimport { useAuthContext } from '@/providers/AuthProvider';\nimport { useToast } from '@/components/ui/use-toast';\nimport { useSmartLocation } from '@/hooks/useSmartLocation';\nimport { Camera, Upload, RefreshCw, Leaf, AlertTriangle, Loader2, History } from 'lucide-react';\n\nconst CROP_TYPES = [\n  { value: 'maize', label: 'Maize (Corn)' },\n  { value: 'tomato', label: 'Tomato' },\n  { value: 'potato', label: 'Potato' },\n  { value: 'cassava', label: 'Cassava' },\n  { value: 'rice', label: 'Rice' },\n  { value: 'wheat', label: 'Wheat' },\n  { value: 'coffee', label: 'Coffee' },\n  { value: 'banana', label: 'Banana' },\n  { value: 'cotton', label: 'Cotton' },\n  { value: 'soybean', label: 'Soybean' }\n];\n\nconst CropDiseaseDetectionPage: React.FC = () => {\n  const navigate = useNavigate();\n  const { user } = useAuthContext();\n  const { toast } = useToast();\n  \n  // Initialize smart location\n  useSmartLocation();\n  \n  // Use our INFINITY-LEVEL disease detection hook\n  const { \n    isDetecting, \n    detectionResult, \n    error: detectionError, \n    detectDisease, \n    clearError \n  } = useDiseaseDetection();\n  \n  const [activeTab, setActiveTab] = useState<string>('upload');\n  const [cropType, setCropType] = useState<string>('');\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [previewUrl, setPreviewUrl] = useState<string>('');\n  const [localError, setLocalError] = useState<string>('');\n  \n  // Handle file selection\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (!file) return;\n    \n    // Check file type\n    if (!file.type.startsWith('image/')) {\n      setLocalError('Please select an image file');\n      return;\n    }\n    \n    // Check file size (max 10MB)\n    if (file.size > 10 * 1024 * 1024) {\n      setLocalError('Image size should be less than 10MB');\n      return;\n    }\n    \n    setSelectedFile(file);\n    setLocalError('');\n    clearError();\n    \n    // Create preview URL\n    const url = URL.createObjectURL(file);\n    setPreviewUrl(url);\n  };\n  \n  // Handle camera capture\n  const handleCameraCapture = async () => {\n    // This is a placeholder for camera capture functionality\n    // In a real implementation, this would use the device camera API\n    toast({\n      title: 'Camera capture',\n      description: 'Camera capture is not implemented in this demo',\n    });\n  };\n  \n  // Handle form submission with INFINITY-LEVEL precision\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Validate inputs\n    if (!cropType) {\n      setLocalError('Please select a crop type');\n      return;\n    }\n    \n    if (!selectedFile) {\n      setLocalError('Please select an image');\n      return;\n    }\n    \n    if (!user) {\n      setLocalError('You must be logged in to detect diseases');\n      return;\n    }\n    \n    // Clear any previous errors\n    setLocalError('');\n    clearError();\n    \n    // Use our INFINITY-LEVEL hook to detect disease\n    await detectDisease(selectedFile, cropType);\n  };\n  \n  // Reset form\n  const handleReset = () => {\n    setSelectedFile(null);\n    setPreviewUrl('');\n    setCropType('');\n    setLocalError('');\n    clearError();\n    \n    // Clear file input\n    const fileInput = document.getElementById('image-upload') as HTMLInputElement;\n    if (fileInput) {\n      fileInput.value = '';\n    }\n  };\n  \n  // Redirect to auth if not logged in\n  if (!user) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-green-50 to-blue-50\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader className=\"text-center\">\n            <AlertTriangle className=\"h-12 w-12 text-amber-500 mx-auto mb-4\" />\n            <CardTitle>Authentication Required</CardTitle>\n            <CardDescription>\n              You need to be logged in to use the disease detection feature\n            </CardDescription>\n          </CardHeader>\n          <CardFooter>\n            <Button \n              onClick={() => navigate('/auth')} \n              className=\"w-full\"\n            >\n              Go to Login\n            </Button>\n          </CardFooter>\n        </Card>\n      </div>\n    );\n  }\n  \n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-blue-50 p-4\">\n      <div className=\"max-w-4xl mx-auto space-y-6\">\n        {/* Header */}\n        <div className=\"text-center\">\n          <div className=\"flex items-center justify-center gap-2 mb-4\">\n            <Leaf className=\"h-8 w-8 text-green-600\" />\n            <h1 className=\"text-3xl font-bold text-gray-900\">Crop Disease Detection</h1>\n          </div>\n          <p className=\"text-gray-600 max-w-2xl mx-auto\">\n            Upload an image of your crop to detect diseases and get treatment recommendations. \n            Our AI-powered system provides accurate diagnosis with confidence scores.\n          </p>\n        </div>\n        \n        {/* Main Content */}\n        {!detectionResult ? (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Camera className=\"h-5 w-5\" />\n                Disease Detection\n              </CardTitle>\n              <CardDescription>\n                Select your crop type and upload an image for analysis\n              </CardDescription>\n            </CardHeader>\n            \n            <CardContent>\n              <Tabs value={activeTab} onValueChange={setActiveTab}>\n                <TabsList className=\"grid w-full grid-cols-2\">\n                  <TabsTrigger value=\"upload\">Upload Image</TabsTrigger>\n                  <TabsTrigger value=\"camera\">Take Photo</TabsTrigger>\n                </TabsList>\n                \n                <form onSubmit={handleSubmit} className=\"space-y-6 mt-6\">\n                  {/* Crop Type Selection */}\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"crop-type\">Crop Type</Label>\n                    <Select value={cropType} onValueChange={setCropType}>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select your crop type\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {CROP_TYPES.map((crop) => (\n                          <SelectItem key={crop.value} value={crop.value}>\n                            {crop.label}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  \n                  <TabsContent value=\"upload\" className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"image-upload\">Plant Image</Label>\n                      <Input\n                        id=\"image-upload\"\n                        type=\"file\"\n                        accept=\"image/*\"\n                        onChange={handleFileChange}\n                        className=\"cursor-pointer\"\n                      />\n                      <p className=\"text-xs text-muted-foreground\">\n                        Supported formats: JPG, PNG, WebP. Max size: 10MB\n                      </p>\n                    </div>\n                    \n                    {previewUrl && (\n                      <div className=\"border rounded-lg overflow-hidden\">\n                        <img\n                          src={previewUrl}\n                          alt=\"Preview\"\n                          className=\"w-full h-64 object-cover\"\n                        />\n                      </div>\n                    )}\n                  </TabsContent>\n                  \n                  <TabsContent value=\"camera\" className=\"space-y-4\">\n                    <div className=\"text-center py-8 border-2 border-dashed border-gray-300 rounded-lg\">\n                      <Camera className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                      <p className=\"text-gray-500 mb-4\">Camera capture coming soon</p>\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        onClick={handleCameraCapture}\n                        disabled\n                      >\n                        <Camera className=\"h-4 w-4 mr-2\" />\n                        Take Photo\n                      </Button>\n                    </div>\n                  </TabsContent>\n                  \n                  {(localError || detectionError) && (\n                    <div className=\"bg-red-50 border border-red-200 rounded-md p-3\">\n                      <div className=\"flex items-center gap-2\">\n                        <AlertTriangle className=\"h-4 w-4 text-red-500\" />\n                        <p className=\"text-sm text-red-700\">{localError || detectionError}</p>\n                      </div>\n                    </div>\n                  )}\n                  \n                  <div className=\"flex gap-3\">\n                    <Button\n                      type=\"submit\"\n                      disabled={isDetecting || !cropType || !selectedFile}\n                      className=\"flex-1\"\n                    >\n                      {isDetecting ? (\n                        <>\n                          <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                          Analyzing...\n                        </>\n                      ) : (\n                        <>\n                          <Upload className=\"h-4 w-4 mr-2\" />\n                          Detect Disease\n                        </>\n                      )}\n                    </Button>\n                    \n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={handleReset}\n                      disabled={isDetecting}\n                    >\n                      <RefreshCw className=\"h-4 w-4 mr-2\" />\n                      Reset\n                    </Button>\n                  </div>\n                </form>\n              </Tabs>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"space-y-6\">\n            {/* Results */}\n            <DiseaseDetectionResult\n              result={detectionResult}\n              showImage={true}\n              imageUrl={previewUrl}\n            />\n            \n            {/* Actions */}\n            <Card>\n              <CardContent className=\"pt-6\">\n                <div className=\"flex gap-3\">\n                  <Button onClick={handleReset} className=\"flex-1\">\n                    <RefreshCw className=\"h-4 w-4 mr-2\" />\n                    Analyze Another Image\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => navigate('/dashboard')}\n                  >\n                    Back to Dashboard\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default CropDiseaseDetectionPage;"