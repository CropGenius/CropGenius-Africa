import React from 'react';\nimport { render, screen, fireEvent } from '@/test-utils/render';\nimport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n} from '@/components/ui/card';\nimport { expectElementToBeAccessible } from '@/test-utils/render';\n\ndescribe('Card Components - INFINITY Testing 🚀', () => {\n  describe('Card Base Component', () => {\n    it('renders correctly with default props', () => {\n      render(\n        <Card data-testid=\"test-card\">\n          <div>Card Content</div>\n        </Card>\n      );\n      \n      const card = screen.getByTestId('test-card');\n      expect(card).toBeInTheDocument();\n      expect(card).toHaveClass('rounded-lg');\n      expect(card).toHaveClass('border');\n      expect(card).toHaveClass('bg-card');\n      expect(card).toHaveClass('text-card-foreground');\n      expect(card).toHaveClass('shadow-sm');\n    });\n\n    it('applies custom className', () => {\n      render(\n        <Card className=\"custom-farmer-card\" data-testid=\"custom-card\">\n          Content\n        </Card>\n      );\n      \n      const card = screen.getByTestId('custom-card');\n      expect(card).toHaveClass('custom-farmer-card');\n      expect(card).toHaveClass('rounded-lg'); // Default classes preserved\n    });\n\n    it('forwards ref correctly', () => {\n      const ref = React.createRef<HTMLDivElement>();\n      \n      render(\n        <Card ref={ref} data-testid=\"ref-card\">\n          Content\n        </Card>\n      );\n      \n      expect(ref.current).toBeInstanceOf(HTMLDivElement);\n      expect(ref.current).toBe(screen.getByTestId('ref-card'));\n    });\n  });\n\n  describe('CardHeader Component', () => {\n    it('renders with correct styling', () => {\n      render(\n        <Card>\n          <CardHeader data-testid=\"card-header\">\n            Header Content\n          </CardHeader>\n        </Card>\n      );\n      \n      const header = screen.getByTestId('card-header');\n      expect(header).toBeInTheDocument();\n      expect(header).toHaveClass('flex');\n      expect(header).toHaveClass('flex-col');\n      expect(header).toHaveClass('space-y-1.5');\n      expect(header).toHaveClass('p-6');\n    });\n\n    it('applies custom className', () => {\n      render(\n        <Card>\n          <CardHeader className=\"custom-header\" data-testid=\"custom-header\">\n            Custom Header\n          </CardHeader>\n        </Card>\n      );\n      \n      const header = screen.getByTestId('custom-header');\n      expect(header).toHaveClass('custom-header');\n      expect(header).toHaveClass('flex'); // Default classes preserved\n    });\n  });\n\n  describe('CardTitle Component', () => {\n    it('renders as h3 by default', () => {\n      render(\n        <Card>\n          <CardHeader>\n            <CardTitle>Farm Dashboard</CardTitle>\n          </CardHeader>\n        </Card>\n      );\n      \n      const title = screen.getByRole('heading', { level: 3 });\n      expect(title).toBeInTheDocument();\n      expect(title).toHaveTextContent('Farm Dashboard');\n      expect(title).toHaveClass('text-2xl');\n      expect(title).toHaveClass('font-semibold');\n      expect(title).toHaveClass('leading-none');\n      expect(title).toHaveClass('tracking-tight');\n    });\n\n    it('applies custom className', () => {\n      render(\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"custom-title\">\n              Custom Title\n            </CardTitle>\n          </CardHeader>\n        </Card>\n      );\n      \n      const title = screen.getByRole('heading');\n      expect(title).toHaveClass('custom-title');\n      expect(title).toHaveClass('text-2xl'); // Default classes preserved\n    });\n  });\n\n  describe('CardDescription Component', () => {\n    it('renders with correct styling', () => {\n      render(\n        <Card>\n          <CardHeader>\n            <CardDescription data-testid=\"card-description\">\n              Monitor your farm's performance and crop health\n            </CardDescription>\n          </CardHeader>\n        </Card>\n      );\n      \n      const description = screen.getByTestId('card-description');\n      expect(description).toBeInTheDocument();\n      expect(description).toHaveClass('text-sm');\n      expect(description).toHaveClass('text-muted-foreground');\n      expect(description).toHaveTextContent('Monitor your farm\\'s performance and crop health');\n    });\n\n    it('applies custom className', () => {\n      render(\n        <Card>\n          <CardHeader>\n            <CardDescription className=\"custom-description\" data-testid=\"custom-desc\">\n              Custom Description\n            </CardDescription>\n          </CardHeader>\n        </Card>\n      );\n      \n      const description = screen.getByTestId('custom-desc');\n      expect(description).toHaveClass('custom-description');\n      expect(description).toHaveClass('text-sm'); // Default classes preserved\n    });\n  });\n\n  describe('CardContent Component', () => {\n    it('renders with correct styling', () => {\n      render(\n        <Card>\n          <CardContent data-testid=\"card-content\">\n            <p>Main card content goes here</p>\n          </CardContent>\n        </Card>\n      );\n      \n      const content = screen.getByTestId('card-content');\n      expect(content).toBeInTheDocument();\n      expect(content).toHaveClass('p-6');\n      expect(content).toHaveClass('pt-0');\n    });\n\n    it('applies custom className', () => {\n      render(\n        <Card>\n          <CardContent className=\"custom-content\" data-testid=\"custom-content\">\n            Custom Content\n          </CardContent>\n        </Card>\n      );\n      \n      const content = screen.getByTestId('custom-content');\n      expect(content).toHaveClass('custom-content');\n      expect(content).toHaveClass('p-6'); // Default classes preserved\n    });\n  });\n\n  describe('CardFooter Component', () => {\n    it('renders with correct styling', () => {\n      render(\n        <Card>\n          <CardFooter data-testid=\"card-footer\">\n            <button>Action Button</button>\n          </CardFooter>\n        </Card>\n      );\n      \n      const footer = screen.getByTestId('card-footer');\n      expect(footer).toBeInTheDocument();\n      expect(footer).toHaveClass('flex');\n      expect(footer).toHaveClass('items-center');\n      expect(footer).toHaveClass('p-6');\n      expect(footer).toHaveClass('pt-0');\n    });\n\n    it('applies custom className', () => {\n      render(\n        <Card>\n          <CardFooter className=\"custom-footer\" data-testid=\"custom-footer\">\n            Footer Content\n          </CardFooter>\n        </Card>\n      );\n      \n      const footer = screen.getByTestId('custom-footer');\n      expect(footer).toHaveClass('custom-footer');\n      expect(footer).toHaveClass('flex'); // Default classes preserved\n    });\n  });\n\n  describe('Complete Card Structure', () => {\n    it('renders full card with all components', () => {\n      render(\n        <Card data-testid=\"complete-card\">\n          <CardHeader>\n            <CardTitle>Crop Health Monitor</CardTitle>\n            <CardDescription>\n              Real-time monitoring of your crop conditions\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div data-testid=\"chart-placeholder\">\n              [Chart would go here]\n            </div>\n          </CardContent>\n          <CardFooter>\n            <button>View Details</button>\n            <button>Export Data</button>\n          </CardFooter>\n        </Card>\n      );\n      \n      // Check all components are present\n      expect(screen.getByTestId('complete-card')).toBeInTheDocument();\n      expect(screen.getByRole('heading', { name: 'Crop Health Monitor' })).toBeInTheDocument();\n      expect(screen.getByText('Real-time monitoring of your crop conditions')).toBeInTheDocument();\n      expect(screen.getByTestId('chart-placeholder')).toBeInTheDocument();\n      expect(screen.getByRole('button', { name: 'View Details' })).toBeInTheDocument();\n      expect(screen.getByRole('button', { name: 'Export Data' })).toBeInTheDocument();\n    });\n\n    it('maintains proper semantic structure', () => {\n      render(\n        <Card>\n          <CardHeader>\n            <CardTitle>Market Prices</CardTitle>\n            <CardDescription>Latest crop prices in your area</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <ul>\n              <li>Maize: KES 45/kg</li>\n              <li>Beans: KES 120/kg</li>\n            </ul>\n          </CardContent>\n        </Card>\n      );\n      \n      // Check semantic structure\n      const heading = screen.getByRole('heading');\n      const list = screen.getByRole('list');\n      const listItems = screen.getAllByRole('listitem');\n      \n      expect(heading).toBeInTheDocument();\n      expect(list).toBeInTheDocument();\n      expect(listItems).toHaveLength(2);\n    });\n  });\n\n  describe('Interactive Cards', () => {\n    it('handles click events on card', () => {\n      const handleClick = vi.fn();\n      \n      render(\n        <Card onClick={handleClick} data-testid=\"clickable-card\" className=\"cursor-pointer\">\n          <CardContent>\n            <p>Click me to view farm details</p>\n          </CardContent>\n        </Card>\n      );\n      \n      const card = screen.getByTestId('clickable-card');\n      fireEvent.click(card);\n      \n      expect(handleClick).toHaveBeenCalledTimes(1);\n    });\n\n    it('handles keyboard navigation', () => {\n      const handleKeyDown = vi.fn();\n      \n      render(\n        <Card \n          onKeyDown={handleKeyDown} \n          tabIndex={0} \n          data-testid=\"keyboard-card\"\n          role=\"button\"\n        >\n          <CardContent>\n            <p>Keyboard accessible card</p>\n          </CardContent>\n        </Card>\n      );\n      \n      const card = screen.getByTestId('keyboard-card');\n      card.focus();\n      \n      expect(card).toHaveFocus();\n      \n      fireEvent.keyDown(card, { key: 'Enter' });\n      expect(handleKeyDown).toHaveBeenCalled();\n    });\n  });\n\n  describe('Accessibility', () => {\n    it('meets accessibility standards', async () => {\n      const { container } = render(\n        <Card>\n          <CardHeader>\n            <CardTitle>Accessible Farm Card</CardTitle>\n            <CardDescription>This card is fully accessible</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <p>Content that screen readers can understand</p>\n          </CardContent>\n          <CardFooter>\n            <button aria-label=\"View farm details\">View Details</button>\n          </CardFooter>\n        </Card>\n      );\n      \n      await expectElementToBeAccessible(container);\n    });\n\n    it('supports ARIA attributes', () => {\n      render(\n        <Card \n          role=\"region\" \n          aria-labelledby=\"card-title\" \n          aria-describedby=\"card-desc\"\n          data-testid=\"aria-card\"\n        >\n          <CardHeader>\n            <CardTitle id=\"card-title\">Weather Alert</CardTitle>\n            <CardDescription id=\"card-desc\">\n              Heavy rains expected in your area\n            </CardDescription>\n          </CardHeader>\n        </Card>\n      );\n      \n      const card = screen.getByTestId('aria-card');\n      expect(card).toHaveAttribute('role', 'region');\n      expect(card).toHaveAttribute('aria-labelledby', 'card-title');\n      expect(card).toHaveAttribute('aria-describedby', 'card-desc');\n    });\n  });\n\n  describe('Responsive Design', () => {\n    it('applies responsive classes correctly', () => {\n      render(\n        <Card className=\"w-full md:w-1/2 lg:w-1/3\" data-testid=\"responsive-card\">\n          <CardContent>\n            <p>Responsive card content</p>\n          </CardContent>\n        </Card>\n      );\n      \n      const card = screen.getByTestId('responsive-card');\n      expect(card).toHaveClass('w-full');\n      expect(card).toHaveClass('md:w-1/2');\n      expect(card).toHaveClass('lg:w-1/3');\n    });\n  });\n\n  describe('Real-World Farmer Scenarios', () => {\n    it('renders crop disease detection card', () => {\n      render(\n        <Card data-testid=\"disease-card\">\n          <CardHeader>\n            <CardTitle>🔍 Crop Disease Detection</CardTitle>\n            <CardDescription>\n              AI-powered disease identification for your crops\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-center p-4\">\n              <p>Upload a photo of your crop to get instant diagnosis</p>\n            </div>\n          </CardContent>\n          <CardFooter>\n            <button className=\"w-full\">📷 Take Photo</button>\n          </CardFooter>\n        </Card>\n      );\n      \n      expect(screen.getByTestId('disease-card')).toBeInTheDocument();\n      expect(screen.getByText('🔍 Crop Disease Detection')).toBeInTheDocument();\n      expect(screen.getByText('📷 Take Photo')).toBeInTheDocument();\n    });\n\n    it('renders market price card', () => {\n      render(\n        <Card data-testid=\"market-card\">\n          <CardHeader>\n            <CardTitle>📊 Market Prices</CardTitle>\n            <CardDescription>Latest prices in Nairobi Market</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between\">\n                <span>Maize</span>\n                <span className=\"font-bold\">KES 45/kg</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Beans</span>\n                <span className=\"font-bold\">KES 120/kg</span>\n              </div>\n            </div>\n          </CardContent>\n          <CardFooter>\n            <button>View All Prices</button>\n          </CardFooter>\n        </Card>\n      );\n      \n      expect(screen.getByTestId('market-card')).toBeInTheDocument();\n      expect(screen.getByText('KES 45/kg')).toBeInTheDocument();\n      expect(screen.getByText('KES 120/kg')).toBeInTheDocument();\n    });\n\n    it('renders weather forecast card', () => {\n      render(\n        <Card data-testid=\"weather-card\">\n          <CardHeader>\n            <CardTitle>🌤️ Weather Forecast</CardTitle>\n            <CardDescription>5-day forecast for your farm</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-5 gap-2 text-center\">\n              <div>Mon<br/>☀️<br/>28°C</div>\n              <div>Tue<br/>🌧️<br/>24°C</div>\n              <div>Wed<br/>⛅<br/>26°C</div>\n              <div>Thu<br/>☀️<br/>29°C</div>\n              <div>Fri<br/>🌧️<br/>23°C</div>\n            </div>\n          </CardContent>\n          <CardFooter>\n            <button>Detailed Forecast</button>\n          </CardFooter>\n        </Card>\n      );\n      \n      expect(screen.getByTestId('weather-card')).toBeInTheDocument();\n      expect(screen.getByText('🌤️ Weather Forecast')).toBeInTheDocument();\n      expect(screen.getByText('28°C')).toBeInTheDocument();\n    });\n\n    it('renders farm statistics card', () => {\n      render(\n        <Card data-testid=\"stats-card\">\n          <CardHeader>\n            <CardTitle>📈 Farm Statistics</CardTitle>\n            <CardDescription>Your farm performance this season</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-green-600\">85%</div>\n                <div className=\"text-sm text-muted-foreground\">Crop Health</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-blue-600\">12.5</div>\n                <div className=\"text-sm text-muted-foreground\">Hectares</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      );\n      \n      expect(screen.getByTestId('stats-card')).toBeInTheDocument();\n      expect(screen.getByText('85%')).toBeInTheDocument();\n      expect(screen.getByText('12.5')).toBeInTheDocument();\n      expect(screen.getByText('Crop Health')).toBeInTheDocument();\n    });\n  });\n\n  describe('Performance', () => {\n    it('renders multiple cards efficiently', () => {\n      const cards = Array.from({ length: 50 }, (_, i) => (\n        <Card key={i} data-testid={`card-${i}`}>\n          <CardHeader>\n            <CardTitle>Card {i}</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p>Content for card {i}</p>\n          </CardContent>\n        </Card>\n      ));\n      \n      render(<div className=\"grid gap-4\">{cards}</div>);\n      \n      expect(screen.getAllByRole('heading')).toHaveLength(50);\n      expect(screen.getByTestId('card-0')).toBeInTheDocument();\n      expect(screen.getByTestId('card-49')).toBeInTheDocument();\n    });\n  });\n\n  describe('Edge Cases', () => {\n    it('handles empty card gracefully', () => {\n      render(<Card data-testid=\"empty-card\" />);\n      \n      const card = screen.getByTestId('empty-card');\n      expect(card).toBeInTheDocument();\n      expect(card).toBeEmptyDOMElement();\n    });\n\n    it('handles card with only header', () => {\n      render(\n        <Card data-testid=\"header-only-card\">\n          <CardHeader>\n            <CardTitle>Header Only</CardTitle>\n          </CardHeader>\n        </Card>\n      );\n      \n      expect(screen.getByTestId('header-only-card')).toBeInTheDocument();\n      expect(screen.getByText('Header Only')).toBeInTheDocument();\n    });\n\n    it('handles card with only content', () => {\n      render(\n        <Card data-testid=\"content-only-card\">\n          <CardContent>\n            <p>Content only card</p>\n          </CardContent>\n        </Card>\n      );\n      \n      expect(screen.getByTestId('content-only-card')).toBeInTheDocument();\n      expect(screen.getByText('Content only card')).toBeInTheDocument();\n    });\n  });\n});