import React from 'react';\nimport { render, screen, fireEvent } from '@/test-utils/render';\nimport { Button } from '@/components/ui/button';\nimport { expectElementToBeAccessible } from '@/test-utils/render';\n\ndescribe('Button Component - INFINITY Testing 🚀', () => {\n  describe('Rendering', () => {\n    it('renders correctly with default props', () => {\n      render(<Button>Click me</Button>);\n      const button = screen.getByRole('button', { name: /click me/i });\n      \n      expect(button).toBeInTheDocument();\n      expect(button).toHaveClass('inline-flex');\n      expect(button).not.toBeDisabled();\n      expect(button).toHaveAttribute('type', 'button');\n    });\n\n    it('renders with custom text content', () => {\n      const buttonText = 'Save Farm Data';\n      render(<Button>{buttonText}</Button>);\n      \n      expect(screen.getByRole('button', { name: buttonText })).toBeInTheDocument();\n    });\n\n    it('renders with JSX children', () => {\n      render(\n        <Button>\n          <span data-testid=\"icon\">🌾</span>\n          <span>Harvest Crops</span>\n        </Button>\n      );\n      \n      expect(screen.getByTestId('icon')).toBeInTheDocument();\n      expect(screen.getByText('Harvest Crops')).toBeInTheDocument();\n    });\n  });\n\n  describe('Variants', () => {\n    it('applies default variant classes', () => {\n      render(<Button>Default Button</Button>);\n      const button = screen.getByRole('button');\n      \n      expect(button).toHaveClass('bg-primary');\n      expect(button).toHaveClass('text-primary-foreground');\n    });\n\n    it('applies destructive variant classes', () => {\n      render(<Button variant=\"destructive\">Delete Farm</Button>);\n      const button = screen.getByRole('button');\n      \n      expect(button).toHaveClass('bg-destructive');\n      expect(button).toHaveClass('text-destructive-foreground');\n    });\n\n    it('applies outline variant classes', () => {\n      render(<Button variant=\"outline\">Cancel</Button>);\n      const button = screen.getByRole('button');\n      \n      expect(button).toHaveClass('border');\n      expect(button).toHaveClass('border-input');\n    });\n\n    it('applies secondary variant classes', () => {\n      render(<Button variant=\"secondary\">Secondary Action</Button>);\n      const button = screen.getByRole('button');\n      \n      expect(button).toHaveClass('bg-secondary');\n    });\n\n    it('applies ghost variant classes', () => {\n      render(<Button variant=\"ghost\">Ghost Button</Button>);\n      const button = screen.getByRole('button');\n      \n      expect(button).toHaveClass('hover:bg-accent');\n    });\n\n    it('applies link variant classes', () => {\n      render(<Button variant=\"link\">Link Button</Button>);\n      const button = screen.getByRole('button');\n      \n      expect(button).toHaveClass('text-primary');\n      expect(button).toHaveClass('underline-offset-4');\n    });\n  });\n\n  describe('Sizes', () => {\n    it('applies default size classes', () => {\n      render(<Button>Default Size</Button>);\n      const button = screen.getByRole('button');\n      \n      expect(button).toHaveClass('h-10');\n      expect(button).toHaveClass('px-4');\n      expect(button).toHaveClass('py-2');\n    });\n\n    it('applies small size classes', () => {\n      render(<Button size=\"sm\">Small Button</Button>);\n      const button = screen.getByRole('button');\n      \n      expect(button).toHaveClass('h-9');\n      expect(button).toHaveClass('px-3');\n    });\n\n    it('applies large size classes', () => {\n      render(<Button size=\"lg\">Large Button</Button>);\n      const button = screen.getByRole('button');\n      \n      expect(button).toHaveClass('h-11');\n      expect(button).toHaveClass('px-8');\n    });\n\n    it('applies icon size classes', () => {\n      render(<Button size=\"icon\">🌾</Button>);\n      const button = screen.getByRole('button');\n      \n      expect(button).toHaveClass('h-10');\n      expect(button).toHaveClass('w-10');\n    });\n  });\n\n  describe('States', () => {\n    it('renders as disabled when disabled prop is true', () => {\n      render(<Button disabled>Disabled Button</Button>);\n      const button = screen.getByRole('button');\n      \n      expect(button).toBeDisabled();\n      expect(button).toHaveClass('disabled:pointer-events-none');\n      expect(button).toHaveClass('disabled:opacity-50');\n    });\n\n    it('does not call onClick when disabled', () => {\n      const handleClick = vi.fn();\n      render(\n        <Button disabled onClick={handleClick}>\n          Disabled Button\n        </Button>\n      );\n      \n      const button = screen.getByRole('button');\n      fireEvent.click(button);\n      \n      expect(handleClick).not.toHaveBeenCalled();\n    });\n\n    it('shows loading state correctly', () => {\n      render(\n        <Button disabled>\n          <span data-testid=\"loading-spinner\">Loading...</span>\n          Processing\n        </Button>\n      );\n      \n      expect(screen.getByTestId('loading-spinner')).toBeInTheDocument();\n      expect(screen.getByText('Processing')).toBeInTheDocument();\n    });\n  });\n\n  describe('Interactions', () => {\n    it('calls onClick handler when clicked', () => {\n      const handleClick = vi.fn();\n      render(<Button onClick={handleClick}>Clickable Button</Button>);\n      \n      const button = screen.getByRole('button');\n      fireEvent.click(button);\n      \n      expect(handleClick).toHaveBeenCalledTimes(1);\n    });\n\n    it('calls onClick with event object', () => {\n      const handleClick = vi.fn();\n      render(<Button onClick={handleClick}>Click Me</Button>);\n      \n      const button = screen.getByRole('button');\n      fireEvent.click(button);\n      \n      expect(handleClick).toHaveBeenCalledWith(expect.any(Object));\n    });\n\n    it('handles multiple rapid clicks', () => {\n      const handleClick = vi.fn();\n      render(<Button onClick={handleClick}>Rapid Click</Button>);\n      \n      const button = screen.getByRole('button');\n      fireEvent.click(button);\n      fireEvent.click(button);\n      fireEvent.click(button);\n      \n      expect(handleClick).toHaveBeenCalledTimes(3);\n    });\n  });\n\n  describe('AsChild Functionality', () => {\n    it('renders as a different element when asChild is true', () => {\n      render(\n        <Button asChild>\n          <a href=\"https://cropgenius.com\" data-testid=\"link-button\">\n            Visit CropGenius\n          </a>\n        </Button>\n      );\n      \n      const link = screen.getByTestId('link-button');\n      expect(link).toBeInTheDocument();\n      expect(link.tagName).toBe('A');\n      expect(link).toHaveAttribute('href', 'https://cropgenius.com');\n      expect(link).toHaveClass('inline-flex'); // Button classes applied\n    });\n\n    it('preserves child element props when asChild is true', () => {\n      render(\n        <Button asChild variant=\"destructive\">\n          <button type=\"submit\" data-testid=\"submit-button\">\n            Submit Form\n          </button>\n        </Button>\n      );\n      \n      const button = screen.getByTestId('submit-button');\n      expect(button).toHaveAttribute('type', 'submit');\n      expect(button).toHaveClass('bg-destructive'); // Button variant applied\n    });\n  });\n\n  describe('Custom Styling', () => {\n    it('applies additional className when provided', () => {\n      const customClass = 'custom-farmer-button';\n      render(\n        <Button className={customClass}>Custom Button</Button>\n      );\n      \n      const button = screen.getByRole('button');\n      expect(button).toHaveClass(customClass);\n      expect(button).toHaveClass('inline-flex'); // Default classes preserved\n    });\n\n    it('merges multiple custom classes', () => {\n      render(\n        <Button className=\"custom-1 custom-2 custom-3\">\n          Multi-Class Button\n        </Button>\n      );\n      \n      const button = screen.getByRole('button');\n      expect(button).toHaveClass('custom-1');\n      expect(button).toHaveClass('custom-2');\n      expect(button).toHaveClass('custom-3');\n    });\n  });\n\n  describe('Form Integration', () => {\n    it('works correctly in form context', () => {\n      const handleSubmit = vi.fn((e) => e.preventDefault());\n      \n      render(\n        <form onSubmit={handleSubmit}>\n          <Button type=\"submit\">Submit Farm Data</Button>\n        </form>\n      );\n      \n      const button = screen.getByRole('button');\n      expect(button).toHaveAttribute('type', 'submit');\n      \n      fireEvent.click(button);\n      expect(handleSubmit).toHaveBeenCalled();\n    });\n\n    it('prevents form submission when disabled', () => {\n      const handleSubmit = vi.fn((e) => e.preventDefault());\n      \n      render(\n        <form onSubmit={handleSubmit}>\n          <Button type=\"submit\" disabled>\n            Submit Disabled\n          </Button>\n        </form>\n      );\n      \n      const button = screen.getByRole('button');\n      fireEvent.click(button);\n      \n      expect(handleSubmit).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('Accessibility', () => {\n    it('has proper ARIA attributes', () => {\n      render(\n        <Button aria-label=\"Save farmer profile\" aria-describedby=\"save-help\">\n          Save\n        </Button>\n      );\n      \n      const button = screen.getByRole('button');\n      expect(button).toHaveAttribute('aria-label', 'Save farmer profile');\n      expect(button).toHaveAttribute('aria-describedby', 'save-help');\n    });\n\n    it('supports keyboard navigation', () => {\n      const handleClick = vi.fn();\n      render(<Button onClick={handleClick}>Keyboard Button</Button>);\n      \n      const button = screen.getByRole('button');\n      button.focus();\n      \n      expect(button).toHaveFocus();\n      \n      fireEvent.keyDown(button, { key: 'Enter' });\n      fireEvent.keyDown(button, { key: ' ' });\n      \n      // Note: onClick should be called by space/enter in real browsers\n      // This tests the button is focusable and receives keyboard events\n    });\n\n    it('meets accessibility standards', async () => {\n      const { container } = render(\n        <Button>Accessible Farmer Button</Button>\n      );\n      \n      await expectElementToBeAccessible(container);\n    });\n\n    it('has sufficient color contrast', () => {\n      render(<Button>High Contrast Button</Button>);\n      const button = screen.getByRole('button');\n      \n      // Button should have proper contrast classes\n      expect(button).toHaveClass('text-primary-foreground');\n    });\n  });\n\n  describe('Performance', () => {\n    it('renders quickly for farmer interactions', async () => {\n      const renderTime = await measureRenderTime(() => {\n        render(<Button>Fast Render Button</Button>);\n      });\n      \n      // Should render in under 16ms (60fps)\n      expect(renderTime).toBeLessThan(16);\n    });\n\n    it('handles many buttons efficiently', () => {\n      const buttons = Array.from({ length: 100 }, (_, i) => (\n        <Button key={i}>Button {i}</Button>\n      ));\n      \n      render(<div>{buttons}</div>);\n      \n      expect(screen.getAllByRole('button')).toHaveLength(100);\n    });\n  });\n\n  describe('Edge Cases', () => {\n    it('handles empty children gracefully', () => {\n      render(<Button>{''}</Button>);\n      const button = screen.getByRole('button');\n      \n      expect(button).toBeInTheDocument();\n      expect(button).toHaveTextContent('');\n    });\n\n    it('handles null children gracefully', () => {\n      render(<Button>{null}</Button>);\n      const button = screen.getByRole('button');\n      \n      expect(button).toBeInTheDocument();\n    });\n\n    it('handles undefined onClick gracefully', () => {\n      render(<Button onClick={undefined}>No Handler</Button>);\n      const button = screen.getByRole('button');\n      \n      expect(() => fireEvent.click(button)).not.toThrow();\n    });\n\n    it('handles very long text content', () => {\n      const longText = 'This is a very long button text that might cause layout issues in some cases but should be handled gracefully by our button component for the best farmer experience';\n      \n      render(<Button>{longText}</Button>);\n      const button = screen.getByRole('button');\n      \n      expect(button).toHaveTextContent(longText);\n      expect(button).toBeInTheDocument();\n    });\n  });\n\n  describe('Real-World Farmer Scenarios', () => {\n    it('works for crop disease detection button', () => {\n      const handleScan = vi.fn();\n      \n      render(\n        <Button onClick={handleScan} variant=\"default\" size=\"lg\">\n          🔍 Scan Crop Disease\n        </Button>\n      );\n      \n      const button = screen.getByRole('button');\n      fireEvent.click(button);\n      \n      expect(handleScan).toHaveBeenCalled();\n      expect(button).toHaveTextContent('🔍 Scan Crop Disease');\n    });\n\n    it('works for market data refresh button', () => {\n      const handleRefresh = vi.fn();\n      \n      render(\n        <Button onClick={handleRefresh} variant=\"outline\" size=\"sm\">\n          📊 Refresh Market Prices\n        </Button>\n      );\n      \n      const button = screen.getByRole('button');\n      fireEvent.click(button);\n      \n      expect(handleRefresh).toHaveBeenCalled();\n    });\n\n    it('works for emergency weather alert button', () => {\n      const handleAlert = vi.fn();\n      \n      render(\n        <Button onClick={handleAlert} variant=\"destructive\" size=\"lg\">\n          ⚠️ Weather Emergency Alert\n        </Button>\n      );\n      \n      const button = screen.getByRole('button');\n      expect(button).toHaveClass('bg-destructive');\n      \n      fireEvent.click(button);\n      expect(handleAlert).toHaveBeenCalled();\n    });\n  });\n});