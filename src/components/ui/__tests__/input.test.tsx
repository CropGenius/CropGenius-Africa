import React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@/test-utils/render';\nimport { Input } from '@/components/ui/input';\nimport { expectElementToBeAccessible } from '@/test-utils/render';\n\ndescribe('Input Component - INFINITY Testing 🚀', () => {\n  describe('Basic Rendering', () => {\n    it('renders correctly with default props', () => {\n      render(<Input data-testid=\"test-input\" />);\n      \n      const input = screen.getByTestId('test-input');\n      expect(input).toBeInTheDocument();\n      expect(input).toHaveClass('flex');\n      expect(input).toHaveClass('h-10');\n      expect(input).toHaveClass('w-full');\n      expect(input).toHaveClass('rounded-md');\n      expect(input).toHaveClass('border');\n      expect(input).toHaveClass('border-input');\n      expect(input).toHaveClass('bg-background');\n      expect(input).toHaveClass('px-3');\n      expect(input).toHaveClass('py-2');\n    });\n\n    it('renders with placeholder text', () => {\n      const placeholder = 'Enter your farm name';\n      render(<Input placeholder={placeholder} data-testid=\"placeholder-input\" />);\n      \n      const input = screen.getByTestId('placeholder-input');\n      expect(input).toHaveAttribute('placeholder', placeholder);\n      expect(screen.getByPlaceholderText(placeholder)).toBeInTheDocument();\n    });\n\n    it('renders with default value', () => {\n      const defaultValue = 'Sunrise Farm';\n      render(<Input defaultValue={defaultValue} data-testid=\"default-value-input\" />);\n      \n      const input = screen.getByTestId('default-value-input') as HTMLInputElement;\n      expect(input.value).toBe(defaultValue);\n    });\n\n    it('renders with controlled value', () => {\n      const TestComponent = () => {\n        const [value, setValue] = React.useState('Initial Value');\n        return (\n          <Input \n            value={value} \n            onChange={(e) => setValue(e.target.value)}\n            data-testid=\"controlled-input\"\n          />\n        );\n      };\n      \n      render(<TestComponent />);\n      \n      const input = screen.getByTestId('controlled-input') as HTMLInputElement;\n      expect(input.value).toBe('Initial Value');\n    });\n  });\n\n  describe('Input Types', () => {\n    it('renders text input by default', () => {\n      render(<Input data-testid=\"text-input\" />);\n      \n      const input = screen.getByTestId('text-input');\n      expect(input).toHaveAttribute('type', 'text');\n    });\n\n    it('renders email input correctly', () => {\n      render(<Input type=\"email\" data-testid=\"email-input\" />);\n      \n      const input = screen.getByTestId('email-input');\n      expect(input).toHaveAttribute('type', 'email');\n    });\n\n    it('renders password input correctly', () => {\n      render(<Input type=\"password\" data-testid=\"password-input\" />);\n      \n      const input = screen.getByTestId('password-input');\n      expect(input).toHaveAttribute('type', 'password');\n    });\n\n    it('renders number input correctly', () => {\n      render(<Input type=\"number\" data-testid=\"number-input\" />);\n      \n      const input = screen.getByTestId('number-input');\n      expect(input).toHaveAttribute('type', 'number');\n    });\n\n    it('renders tel input correctly', () => {\n      render(<Input type=\"tel\" data-testid=\"tel-input\" />);\n      \n      const input = screen.getByTestId('tel-input');\n      expect(input).toHaveAttribute('type', 'tel');\n    });\n\n    it('renders url input correctly', () => {\n      render(<Input type=\"url\" data-testid=\"url-input\" />);\n      \n      const input = screen.getByTestId('url-input');\n      expect(input).toHaveAttribute('type', 'url');\n    });\n\n    it('renders search input correctly', () => {\n      render(<Input type=\"search\" data-testid=\"search-input\" />);\n      \n      const input = screen.getByTestId('search-input');\n      expect(input).toHaveAttribute('type', 'search');\n    });\n  });\n\n  describe('States and Attributes', () => {\n    it('renders as disabled when disabled prop is true', () => {\n      render(<Input disabled data-testid=\"disabled-input\" />);\n      \n      const input = screen.getByTestId('disabled-input');\n      expect(input).toBeDisabled();\n      expect(input).toHaveClass('disabled:cursor-not-allowed');\n      expect(input).toHaveClass('disabled:opacity-50');\n    });\n\n    it('renders as readonly when readOnly prop is true', () => {\n      render(<Input readOnly data-testid=\"readonly-input\" />);\n      \n      const input = screen.getByTestId('readonly-input');\n      expect(input).toHaveAttribute('readonly');\n    });\n\n    it('renders as required when required prop is true', () => {\n      render(<Input required data-testid=\"required-input\" />);\n      \n      const input = screen.getByTestId('required-input');\n      expect(input).toHaveAttribute('required');\n    });\n\n    it('applies maxLength attribute', () => {\n      render(<Input maxLength={50} data-testid=\"maxlength-input\" />);\n      \n      const input = screen.getByTestId('maxlength-input');\n      expect(input).toHaveAttribute('maxLength', '50');\n    });\n\n    it('applies minLength attribute', () => {\n      render(<Input minLength={3} data-testid=\"minlength-input\" />);\n      \n      const input = screen.getByTestId('minlength-input');\n      expect(input).toHaveAttribute('minLength', '3');\n    });\n\n    it('applies pattern attribute', () => {\n      const pattern = '[0-9]{3}-[0-9]{3}-[0-9]{4}';\n      render(<Input pattern={pattern} data-testid=\"pattern-input\" />);\n      \n      const input = screen.getByTestId('pattern-input');\n      expect(input).toHaveAttribute('pattern', pattern);\n    });\n  });\n\n  describe('User Interactions', () => {\n    it('handles onChange events', async () => {\n      const handleChange = vi.fn();\n      render(<Input onChange={handleChange} data-testid=\"change-input\" />);\n      \n      const input = screen.getByTestId('change-input');\n      fireEvent.change(input, { target: { value: 'New Value' } });\n      \n      expect(handleChange).toHaveBeenCalledTimes(1);\n      expect(handleChange).toHaveBeenCalledWith(expect.any(Object));\n    });\n\n    it('handles onFocus events', () => {\n      const handleFocus = vi.fn();\n      render(<Input onFocus={handleFocus} data-testid=\"focus-input\" />);\n      \n      const input = screen.getByTestId('focus-input');\n      fireEvent.focus(input);\n      \n      expect(handleFocus).toHaveBeenCalledTimes(1);\n    });\n\n    it('handles onBlur events', () => {\n      const handleBlur = vi.fn();\n      render(<Input onBlur={handleBlur} data-testid=\"blur-input\" />);\n      \n      const input = screen.getByTestId('blur-input');\n      fireEvent.focus(input);\n      fireEvent.blur(input);\n      \n      expect(handleBlur).toHaveBeenCalledTimes(1);\n    });\n\n    it('handles onKeyDown events', () => {\n      const handleKeyDown = vi.fn();\n      render(<Input onKeyDown={handleKeyDown} data-testid=\"keydown-input\" />);\n      \n      const input = screen.getByTestId('keydown-input');\n      fireEvent.keyDown(input, { key: 'Enter' });\n      \n      expect(handleKeyDown).toHaveBeenCalledTimes(1);\n      expect(handleKeyDown).toHaveBeenCalledWith(\n        expect.objectContaining({ key: 'Enter' })\n      );\n    });\n\n    it('handles typing correctly', async () => {\n      const TestComponent = () => {\n        const [value, setValue] = React.useState('');\n        return (\n          <Input \n            value={value} \n            onChange={(e) => setValue(e.target.value)}\n            data-testid=\"typing-input\"\n          />\n        );\n      };\n      \n      render(<TestComponent />);\n      \n      const input = screen.getByTestId('typing-input') as HTMLInputElement;\n      \n      fireEvent.change(input, { target: { value: 'Hello Farmer' } });\n      \n      await waitFor(() => {\n        expect(input.value).toBe('Hello Farmer');\n      });\n    });\n\n    it('does not trigger onChange when disabled', () => {\n      const handleChange = vi.fn();\n      render(<Input disabled onChange={handleChange} data-testid=\"disabled-change-input\" />);\n      \n      const input = screen.getByTestId('disabled-change-input');\n      fireEvent.change(input, { target: { value: 'Should not change' } });\n      \n      expect(handleChange).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('Custom Styling', () => {\n    it('applies custom className', () => {\n      render(<Input className=\"custom-farmer-input\" data-testid=\"custom-input\" />);\n      \n      const input = screen.getByTestId('custom-input');\n      expect(input).toHaveClass('custom-farmer-input');\n      expect(input).toHaveClass('flex'); // Default classes preserved\n    });\n\n    it('merges multiple custom classes', () => {\n      render(\n        <Input \n          className=\"border-green-500 bg-green-50 text-green-900\" \n          data-testid=\"multi-class-input\" \n        />\n      );\n      \n      const input = screen.getByTestId('multi-class-input');\n      expect(input).toHaveClass('border-green-500');\n      expect(input).toHaveClass('bg-green-50');\n      expect(input).toHaveClass('text-green-900');\n    });\n  });\n\n  describe('Form Integration', () => {\n    it('works correctly in form context', () => {\n      const handleSubmit = vi.fn((e) => {\n        e.preventDefault();\n        const formData = new FormData(e.target);\n        return formData.get('farmName');\n      });\n      \n      render(\n        <form onSubmit={handleSubmit}>\n          <Input name=\"farmName\" defaultValue=\"Test Farm\" data-testid=\"form-input\" />\n          <button type=\"submit\">Submit</button>\n        </form>\n      );\n      \n      const input = screen.getByTestId('form-input');\n      const submitButton = screen.getByRole('button', { name: 'Submit' });\n      \n      expect(input).toHaveAttribute('name', 'farmName');\n      \n      fireEvent.click(submitButton);\n      expect(handleSubmit).toHaveBeenCalled();\n    });\n\n    it('supports form validation', () => {\n      render(\n        <form>\n          <Input \n            type=\"email\" \n            required \n            pattern=\"[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,}$\"\n            data-testid=\"validation-input\"\n          />\n        </form>\n      );\n      \n      const input = screen.getByTestId('validation-input');\n      expect(input).toHaveAttribute('required');\n      expect(input).toHaveAttribute('pattern');\n      expect(input).toHaveAttribute('type', 'email');\n    });\n  });\n\n  describe('Accessibility', () => {\n    it('supports ARIA attributes', () => {\n      render(\n        <Input \n          aria-label=\"Farm name input\"\n          aria-describedby=\"farm-name-help\"\n          aria-required=\"true\"\n          data-testid=\"aria-input\"\n        />\n      );\n      \n      const input = screen.getByTestId('aria-input');\n      expect(input).toHaveAttribute('aria-label', 'Farm name input');\n      expect(input).toHaveAttribute('aria-describedby', 'farm-name-help');\n      expect(input).toHaveAttribute('aria-required', 'true');\n    });\n\n    it('supports keyboard navigation', () => {\n      render(\n        <div>\n          <Input data-testid=\"input-1\" />\n          <Input data-testid=\"input-2\" />\n        </div>\n      );\n      \n      const input1 = screen.getByTestId('input-1');\n      const input2 = screen.getByTestId('input-2');\n      \n      input1.focus();\n      expect(input1).toHaveFocus();\n      \n      fireEvent.keyDown(input1, { key: 'Tab' });\n      input2.focus();\n      expect(input2).toHaveFocus();\n    });\n\n    it('meets accessibility standards', async () => {\n      const { container } = render(\n        <div>\n          <label htmlFor=\"accessible-input\">Farm Name</label>\n          <Input id=\"accessible-input\" data-testid=\"accessible-input\" />\n        </div>\n      );\n      \n      await expectElementToBeAccessible(container);\n    });\n\n    it('works with screen readers', () => {\n      render(\n        <div>\n          <label htmlFor=\"screen-reader-input\">Enter your crop type</label>\n          <Input \n            id=\"screen-reader-input\" \n            aria-describedby=\"crop-help\"\n            data-testid=\"screen-reader-input\"\n          />\n          <div id=\"crop-help\">Choose from maize, beans, tomatoes, etc.</div>\n        </div>\n      );\n      \n      const input = screen.getByTestId('screen-reader-input');\n      const label = screen.getByText('Enter your crop type');\n      const help = screen.getByText('Choose from maize, beans, tomatoes, etc.');\n      \n      expect(input).toHaveAttribute('id', 'screen-reader-input');\n      expect(label).toHaveAttribute('for', 'screen-reader-input');\n      expect(help).toHaveAttribute('id', 'crop-help');\n      expect(input).toHaveAttribute('aria-describedby', 'crop-help');\n    });\n  });\n\n  describe('Real-World Farmer Scenarios', () => {\n    it('handles farm name input', () => {\n      render(\n        <Input \n          type=\"text\"\n          placeholder=\"Enter your farm name\"\n          maxLength={100}\n          data-testid=\"farm-name-input\"\n        />\n      );\n      \n      const input = screen.getByTestId('farm-name-input');\n      fireEvent.change(input, { target: { value: 'Sunrise Organic Farm' } });\n      \n      expect((input as HTMLInputElement).value).toBe('Sunrise Organic Farm');\n    });\n\n    it('handles phone number input', () => {\n      render(\n        <Input \n          type=\"tel\"\n          placeholder=\"+254 712 345 678\"\n          pattern=\"\\+254\\s[0-9]{3}\\s[0-9]{3}\\s[0-9]{3}\"\n          data-testid=\"phone-input\"\n        />\n      );\n      \n      const input = screen.getByTestId('phone-input');\n      expect(input).toHaveAttribute('type', 'tel');\n      expect(input).toHaveAttribute('pattern');\n    });\n\n    it('handles email input for farmer registration', () => {\n      render(\n        <Input \n          type=\"email\"\n          placeholder=\"farmer@example.com\"\n          required\n          data-testid=\"email-input\"\n        />\n      );\n      \n      const input = screen.getByTestId('email-input');\n      fireEvent.change(input, { target: { value: 'john.farmer@gmail.com' } });\n      \n      expect((input as HTMLInputElement).value).toBe('john.farmer@gmail.com');\n      expect(input).toHaveAttribute('type', 'email');\n    });\n\n    it('handles farm size input', () => {\n      render(\n        <Input \n          type=\"number\"\n          placeholder=\"Farm size in hectares\"\n          min=\"0.1\"\n          max=\"1000\"\n          step=\"0.1\"\n          data-testid=\"farm-size-input\"\n        />\n      );\n      \n      const input = screen.getByTestId('farm-size-input');\n      fireEvent.change(input, { target: { value: '5.5' } });\n      \n      expect((input as HTMLInputElement).value).toBe('5.5');\n      expect(input).toHaveAttribute('min', '0.1');\n      expect(input).toHaveAttribute('max', '1000');\n      expect(input).toHaveAttribute('step', '0.1');\n    });\n\n    it('handles crop search input', () => {\n      const handleSearch = vi.fn();\n      \n      render(\n        <Input \n          type=\"search\"\n          placeholder=\"Search crops (maize, beans, tomatoes...)\"\n          onChange={handleSearch}\n          data-testid=\"crop-search-input\"\n        />\n      );\n      \n      const input = screen.getByTestId('crop-search-input');\n      fireEvent.change(input, { target: { value: 'maize' } });\n      \n      expect(handleSearch).toHaveBeenCalled();\n      expect((input as HTMLInputElement).value).toBe('maize');\n    });\n\n    it('handles password input for account security', () => {\n      render(\n        <Input \n          type=\"password\"\n          placeholder=\"Enter secure password\"\n          minLength={8}\n          required\n          data-testid=\"password-input\"\n        />\n      );\n      \n      const input = screen.getByTestId('password-input');\n      expect(input).toHaveAttribute('type', 'password');\n      expect(input).toHaveAttribute('minLength', '8');\n      expect(input).toHaveAttribute('required');\n    });\n  });\n\n  describe('Performance', () => {\n    it('handles rapid typing efficiently', async () => {\n      const handleChange = vi.fn();\n      render(<Input onChange={handleChange} data-testid=\"rapid-input\" />);\n      \n      const input = screen.getByTestId('rapid-input');\n      \n      // Simulate rapid typing\n      const text = 'Quick brown fox jumps over lazy dog';\n      for (let i = 0; i < text.length; i++) {\n        fireEvent.change(input, { target: { value: text.slice(0, i + 1) } });\n      }\n      \n      expect(handleChange).toHaveBeenCalledTimes(text.length);\n    });\n\n    it('renders multiple inputs efficiently', () => {\n      const inputs = Array.from({ length: 100 }, (_, i) => (\n        <Input key={i} placeholder={`Input ${i}`} data-testid={`input-${i}`} />\n      ));\n      \n      render(<div>{inputs}</div>);\n      \n      expect(screen.getByTestId('input-0')).toBeInTheDocument();\n      expect(screen.getByTestId('input-99')).toBeInTheDocument();\n    });\n  });\n\n  describe('Edge Cases', () => {\n    it('handles empty value gracefully', () => {\n      render(<Input value=\"\" onChange={() => {}} data-testid=\"empty-input\" />);\n      \n      const input = screen.getByTestId('empty-input') as HTMLInputElement;\n      expect(input.value).toBe('');\n    });\n\n    it('handles null value gracefully', () => {\n      render(<Input value={null as any} onChange={() => {}} data-testid=\"null-input\" />);\n      \n      const input = screen.getByTestId('null-input');\n      expect(input).toBeInTheDocument();\n    });\n\n    it('handles undefined onChange gracefully', () => {\n      render(<Input onChange={undefined} data-testid=\"no-handler-input\" />);\n      \n      const input = screen.getByTestId('no-handler-input');\n      expect(() => {\n        fireEvent.change(input, { target: { value: 'test' } });\n      }).not.toThrow();\n    });\n\n    it('handles very long text input', () => {\n      const longText = 'A'.repeat(1000);\n      \n      render(<Input defaultValue={longText} data-testid=\"long-text-input\" />);\n      \n      const input = screen.getByTestId('long-text-input') as HTMLInputElement;\n      expect(input.value).toBe(longText);\n    });\n\n    it('handles special characters', () => {\n      const specialText = '!@#$%^&*()_+-=[]{}|;:\",./<>?';\n      \n      render(<Input defaultValue={specialText} data-testid=\"special-chars-input\" />);\n      \n      const input = screen.getByTestId('special-chars-input') as HTMLInputElement;\n      expect(input.value).toBe(specialText);\n    });\n\n    it('handles unicode characters', () => {\n      const unicodeText = '🌾🚜👨‍🌾🌽🥕🍅';\n      \n      render(<Input defaultValue={unicodeText} data-testid=\"unicode-input\" />);\n      \n      const input = screen.getByTestId('unicode-input') as HTMLInputElement;\n      expect(input.value).toBe(unicodeText);\n    });\n  });\n\n  describe('Ref Forwarding', () => {\n    it('forwards ref correctly', () => {\n      const ref = React.createRef<HTMLInputElement>();\n      \n      render(<Input ref={ref} data-testid=\"ref-input\" />);\n      \n      expect(ref.current).toBeInstanceOf(HTMLInputElement);\n      expect(ref.current).toBe(screen.getByTestId('ref-input'));\n    });\n\n    it('allows programmatic focus via ref', () => {\n      const TestComponent = () => {\n        const inputRef = React.useRef<HTMLInputElement>(null);\n        \n        return (\n          <div>\n            <Input ref={inputRef} data-testid=\"focus-ref-input\" />\n            <button onClick={() => inputRef.current?.focus()}>\n              Focus Input\n            </button>\n          </div>\n        );\n      };\n      \n      render(<TestComponent />);\n      \n      const button = screen.getByRole('button', { name: 'Focus Input' });\n      const input = screen.getByTestId('focus-ref-input');\n      \n      fireEvent.click(button);\n      expect(input).toHaveFocus();\n    });\n  });\n});