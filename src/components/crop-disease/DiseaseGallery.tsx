/**\n * ðŸŒ¾ INFINITY-LEVEL DiseaseGallery Component\n * \n * PRODUCTION-READY disease reference gallery for 100 million African farmers! ðŸš€\n * Features:\n * - Real-time disease database from Supabase\n * - Advanced filtering and search\n * - Offline-first with caching\n * - Mobile-optimized UI\n * - Accessibility compliant\n */\n\nimport { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { AlertCircle, Search, Filter, X, ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { useDiseaseGallery } from '@/hooks/use-disease-gallery';\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\nimport { useToast } from \"@/components/ui/use-toast\";\n\nexport default function DiseaseGallery() {\n  const { diseaseGallery, isLoading, error, filterGallery, searchGallery, refreshGallery } = useDiseaseGallery();\n  const [selectedDisease, setSelectedDisease] = useState(null);\n  const [currentImageIndex, setCurrentImageIndex] = useState(0);\n  const [searchQuery, setSearchQuery] = useState('');\n  const { toast } = useToast();\n\n  // Handle search input changes with debounce\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      searchGallery(searchQuery);\n    }, 300);\n\n    return () => clearTimeout(timer);\n  }, [searchQuery, searchGallery]);\n\n  const handleSelectDisease = (disease) => {\n    setSelectedDisease(disease);\n    setCurrentImageIndex(0);\n  };\n\n  const handleNextImage = () => {\n    if (selectedDisease && currentImageIndex < selectedDisease.images.length - 1) {\n      setCurrentImageIndex(currentImageIndex + 1);\n    }\n  };\n\n  const handlePrevImage = () => {\n    if (selectedDisease && currentImageIndex > 0) {\n      setCurrentImageIndex(currentImageIndex - 1);\n    }\n  };\n\n  const handleFilterChange = (cropType) => {\n    filterGallery(cropType);\n  };\n\n  const handleRetry = async () => {\n    toast({\n      title: \"Retrying\",\n      description: \"Attempting to reload disease gallery\",\n    });\n    await refreshGallery();\n  };\n\n  // Handle image loading errors\n  const handleImageError = (event) => {\n    event.target.src = '/images/fallback-image.jpg';\n  };\n\n  // Render loading state\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\" data-testid=\"loading-spinner\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <Skeleton className=\"h-8 w-64 mb-2\" />\n            <Skeleton className=\"h-4 w-96\" />\n          </div>\n          <div className=\"flex gap-2\">\n            <Skeleton className=\"h-10 w-32\" />\n            <Skeleton className=\"h-10 w-32\" />\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {Array(6).fill(0).map((_, index) => (\n            <Card key={index} className=\"overflow-hidden\">\n              <Skeleton className=\"aspect-video w-full\" />\n              <CardHeader className=\"pb-2\">\n                <Skeleton className=\"h-6 w-48\" />\n              </CardHeader>\n              <CardContent className=\"pb-4\">\n                <Skeleton className=\"h-4 w-full mb-2\" />\n                <Skeleton className=\"h-4 w-3/4\" />\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  // Render error state\n  if (error) {\n    return (\n      <Alert variant=\"destructive\" className=\"mb-6\">\n        <AlertCircle className=\"h-4 w-4\" />\n        <AlertTitle>Error loading disease gallery</AlertTitle>\n        <AlertDescription>\n          {error.message}\n          <Button variant=\"outline\" size=\"sm\" className=\"ml-2\" onClick={handleRetry}>\n            Retry\n          </Button>\n        </AlertDescription>\n      </Alert>\n    );\n  }\n\n  // Render empty state\n  if (diseaseGallery.length === 0) {\n    return (\n      <div className=\"flex flex-col items-center justify-center py-12 text-center\">\n        <div className=\"rounded-full bg-muted p-6 mb-4\">\n          <Search className=\"h-10 w-10 text-muted-foreground\" />\n        </div>\n        <h2 className=\"text-2xl font-semibold mb-2\">No diseases found</h2>\n        <p className=\"text-muted-foreground mb-6\">Try adjusting your filters or search terms</p>\n        <Button onClick={() => {\n          filterGallery('');\n          setSearchQuery('');\n        }}>\n          Clear filters\n        </Button>\n      </div>\n    );\n  }\n\n  // Get unique crop types for filter\n  const cropTypes = [...new Set(diseaseGallery.map(disease => disease.crop_type))];\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex flex-col md:flex-row md:items-center justify-between gap-4\">\n        <div>\n          <h1 className=\"text-2xl font-bold\" role=\"heading\" aria-level=\"1\">Disease Reference Gallery</h1>\n          <p className=\"text-muted-foreground\">Learn about common crop diseases, symptoms, and treatments</p>\n        </div>\n        <div className=\"flex flex-col sm:flex-row gap-2\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-2 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n            <Input\n              placeholder=\"Search diseases...\"\n              className=\"pl-8 w-full sm:w-[200px]\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              aria-label=\"Search diseases\"\n            />\n          </div>\n          <Select onValueChange={handleFilterChange}>\n            <SelectTrigger className=\"w-full sm:w-[180px]\" aria-label=\"Filter by crop\">\n              <SelectValue placeholder=\"Filter by crop\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"\">All crops</SelectItem>\n              {cropTypes.map((cropType) => (\n                <SelectItem key={cropType} value={cropType}>\n                  {cropType}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n          <Button variant=\"outline\" onClick={() => refreshGallery()} aria-label=\"Refresh gallery\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"lucide lucide-refresh-cw mr-1\">\n              <path d=\"M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8\" />\n              <path d=\"M21 3v5h-5\" />\n              <path d=\"M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16\" />\n              <path d=\"M8 16H3v5\" />\n            </svg>\n            Refresh\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {diseaseGallery.map((disease) => (\n          <Card \n            key={disease.id} \n            className=\"overflow-hidden cursor-pointer hover:shadow-md transition-shadow\" \n            onClick={() => handleSelectDisease(disease)}\n            data-testid=\"disease-card\"\n          >\n            <div className=\"aspect-video relative overflow-hidden\">\n              <img \n                src={disease.images[0]?.url || '/images/fallback-image.jpg'} \n                alt={`${disease.name} disease on ${disease.crop_type}`} \n                className=\"object-cover w-full h-full\"\n                loading=\"lazy\"\n                onError={handleImageError}\n              />\n              <Badge className=\"absolute top-2 right-2\">{disease.crop_type}</Badge>\n            </div>\n            <CardHeader className=\"pb-2\">\n              <CardTitle role=\"heading\" aria-level=\"2\">{disease.name}</CardTitle>\n            </CardHeader>\n            <CardContent className=\"pb-4\">\n              <p className=\"text-sm text-muted-foreground line-clamp-2\">{disease.description}</p>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {selectedDisease && (\n        <Card className=\"mt-8\">\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <CardTitle className=\"text-2xl\" role=\"heading\" aria-level=\"2\">{selectedDisease.name}</CardTitle>\n                <CardDescription>Affects {selectedDisease.crop_type} crops</CardDescription>\n              </div>\n              <Button \n                variant=\"ghost\" \n                size=\"icon\" \n                onClick={() => setSelectedDisease(null)}\n                aria-label=\"Close disease details\"\n              >\n                <X className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"aspect-video relative overflow-hidden mb-6 rounded-md\">\n              <img \n                src={selectedDisease.images[currentImageIndex]?.url || '/images/fallback-image.jpg'} \n                alt={`${selectedDisease.name} image ${currentImageIndex + 1}`} \n                className=\"object-cover w-full h-full\"\n                onError={handleImageError}\n              />\n              <div className=\"absolute bottom-2 right-2 bg-background/80 rounded-full px-2 py-1 text-xs\">\n                {currentImageIndex + 1}/{selectedDisease.images.length}\n              </div>\n              {selectedDisease.images.length > 1 && (\n                <div className=\"absolute inset-y-0 left-0 right-0 flex justify-between items-center px-4\">\n                  <Button \n                    variant=\"ghost\" \n                    size=\"icon\" \n                    className=\"bg-background/80 rounded-full\" \n                    onClick={(e) => { e.stopPropagation(); handlePrevImage(); }}\n                    disabled={currentImageIndex === 0}\n                    aria-label=\"Previous image\"\n                  >\n                    <ChevronLeft className=\"h-4 w-4\" />\n                  </Button>\n                  <Button \n                    variant=\"ghost\" \n                    size=\"icon\" \n                    className=\"bg-background/80 rounded-full\" \n                    onClick={(e) => { e.stopPropagation(); handleNextImage(); }}\n                    disabled={currentImageIndex === selectedDisease.images.length - 1}\n                    aria-label=\"Next image\"\n                  >\n                    <ChevronRight className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              )}\n            </div>\n\n            <Tabs defaultValue=\"description\">\n              <TabsList className=\"grid grid-cols-4 mb-4\">\n                <TabsTrigger value=\"description\">Description</TabsTrigger>\n                <TabsTrigger value=\"symptoms\">Symptoms</TabsTrigger>\n                <TabsTrigger value=\"treatment\">Treatment</TabsTrigger>\n                <TabsTrigger value=\"prevention\">Prevention</TabsTrigger>\n              </TabsList>\n              <TabsContent value=\"description\" className=\"p-4 border rounded-md\">\n                <p>{selectedDisease.description}</p>\n              </TabsContent>\n              <TabsContent value=\"symptoms\" className=\"p-4 border rounded-md\">\n                <p>{selectedDisease.symptoms}</p>\n              </TabsContent>\n              <TabsContent value=\"treatment\" className=\"p-4 border rounded-md\">\n                <p>{selectedDisease.treatment}</p>\n              </TabsContent>\n              <TabsContent value=\"prevention\" className=\"p-4 border rounded-md\">\n                <p>{selectedDisease.prevention}</p>\n              </TabsContent>\n            </Tabs>\n          </CardContent>\n          <CardFooter>\n            <Button variant=\"outline\" className=\"w-full\">Add to Detection History</Button>\n          </CardFooter>\n        </Card>\n      )}\n    </div>\n  );\n}"