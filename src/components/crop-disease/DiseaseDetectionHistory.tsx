/**\n * ðŸŒ¾ INFINITY-LEVEL DiseaseDetectionHistory Component\n * \n * PRODUCTION-READY component for displaying crop disease detection history\n * with WORLD-CLASS UI/UX for 100 million African farmers! ðŸš€\n * \n * Features:\n * - Real-time Supabase integration\n * - Advanced filtering and sorting\n * - Export functionality\n * - Mobile-optimized design\n * - Accessibility compliant\n * - Offline-first caching\n */\n\nimport React, { useState, useMemo } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';\nimport { Separator } from '@/components/ui/separator';\nimport { \n  AlertCircle, \n  Calendar, \n  Download, \n  Eye, \n  Filter, \n  Leaf, \n  MapPin, \n  RefreshCw, \n  Search, \n  Trash2,\n  TrendingDown,\n  DollarSign,\n  Clock,\n  CheckCircle,\n  XCircle,\n  AlertTriangle\n} from 'lucide-react';\nimport { useDiseaseDetection, DetectionHistoryItem } from '@/hooks/use-disease-detection';\nimport { useToast } from '@/components/ui/use-toast';\nimport { \n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '@/components/ui/dialog';\nimport { DiseaseDetectionResult } from './DiseaseDetectionResult';\n\ntype SortOption = 'newest' | 'oldest' | 'confidence' | 'severity';\ntype FilterOption = 'all' | 'pending' | 'confirmed' | 'treated';\n\n/**\n * INFINITY-LEVEL Disease Detection History Component\n */\nexport default function DiseaseDetectionHistory() {\n  const { \n    detectionHistory, \n    isDetecting, \n    error, \n    deleteDetection, \n    exportDetectionHistory,\n    refreshHistory \n  } = useDiseaseDetection();\n  \n  const [searchQuery, setSearchQuery] = useState('');\n  const [sortBy, setSortBy] = useState<SortOption>('newest');\n  const [filterBy, setFilterBy] = useState<FilterOption>('all');\n  const [selectedDetection, setSelectedDetection] = useState<DetectionHistoryItem | null>(null);\n  const [isDeleting, setIsDeleting] = useState<string | null>(null);\n  const [isExporting, setIsExporting] = useState(false);\n  \n  const { toast } = useToast();\n\n  // Filter and sort history\n  const filteredAndSortedHistory = useMemo(() => {\n    let filtered = detectionHistory;\n\n    // Apply search filter\n    if (searchQuery) {\n      const query = searchQuery.toLowerCase();\n      filtered = filtered.filter(item => \n        item.disease_name.toLowerCase().includes(query) ||\n        item.crop_type.toLowerCase().includes(query) ||\n        item.field_name?.toLowerCase().includes(query)\n      );\n    }\n\n    // Apply status filter\n    if (filterBy !== 'all') {\n      filtered = filtered.filter(item => item.status === filterBy);\n    }\n\n    // Apply sorting\n    const sorted = [...filtered].sort((a, b) => {\n      switch (sortBy) {\n        case 'newest':\n          return new Date(b.created_at).getTime() - new Date(a.created_at).getTime();\n        case 'oldest':\n          return new Date(a.created_at).getTime() - new Date(b.created_at).getTime();\n        case 'confidence':\n          return b.confidence - a.confidence;\n        case 'severity':\n          const severityOrder = { critical: 4, high: 3, medium: 2, low: 1 };\n          return (severityOrder[b.result_data.severity] || 0) - (severityOrder[a.result_data.severity] || 0);\n        default:\n          return 0;\n      }\n    });\n\n    return sorted;\n  }, [detectionHistory, searchQuery, sortBy, filterBy]);\n\n  // Handle delete detection\n  const handleDeleteDetection = async (id: string) => {\n    setIsDeleting(id);\n    try {\n      const result = await deleteDetection(id);\n      if (result.success) {\n        toast({\n          title: \"Detection Deleted\",\n          description: \"Detection record has been removed from your history\",\n        });\n      } else {\n        throw new Error(result.error || 'Failed to delete detection');\n      }\n    } catch (err) {\n      toast({\n        title: \"Delete Failed\",\n        description: err instanceof Error ? err.message : 'Unable to delete detection',\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsDeleting(null);\n    }\n  };\n\n  // Handle export history\n  const handleExportHistory = async () => {\n    setIsExporting(true);\n    try {\n      const result = await exportDetectionHistory();\n      if (result.success) {\n        toast({\n          title: \"Export Successful\",\n          description: \"Your detection history has been downloaded as CSV\",\n        });\n      } else {\n        throw new Error(result.error || 'Failed to export history');\n      }\n    } catch (err) {\n      toast({\n        title: \"Export Failed\",\n        description: err instanceof Error ? err.message : 'Unable to export history',\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsExporting(false);\n    }\n  };\n\n  // Handle refresh\n  const handleRefresh = async () => {\n    try {\n      await refreshHistory();\n      toast({\n        title: \"History Refreshed\",\n        description: \"Detection history has been updated\",\n      });\n    } catch (err) {\n      toast({\n        title: \"Refresh Failed\",\n        description: \"Unable to refresh history\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Get status configuration\n  const getStatusConfig = (status: string) => {\n    switch (status) {\n      case 'confirmed':\n        return { icon: CheckCircle, color: 'text-green-600', bgColor: 'bg-green-100', label: 'Confirmed' };\n      case 'treated':\n        return { icon: CheckCircle, color: 'text-blue-600', bgColor: 'bg-blue-100', label: 'Treated' };\n      case 'pending':\n      default:\n        return { icon: Clock, color: 'text-yellow-600', bgColor: 'bg-yellow-100', label: 'Pending' };\n    }\n  };\n\n  // Get severity configuration\n  const getSeverityConfig = (severity: string) => {\n    switch (severity) {\n      case 'critical':\n        return { color: 'text-red-600', bgColor: 'bg-red-100', label: 'Critical' };\n      case 'high':\n        return { color: 'text-orange-600', bgColor: 'bg-orange-100', label: 'High' };\n      case 'medium':\n        return { color: 'text-yellow-600', bgColor: 'bg-yellow-100', label: 'Medium' };\n      case 'low':\n      default:\n        return { color: 'text-green-600', bgColor: 'bg-green-100', label: 'Low' };\n    }\n  };\n\n  // Render loading state\n  if (isDetecting && detectionHistory.length === 0) {\n    return (\n      <div className=\"space-y-6\" data-testid=\"loading-spinner\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <Skeleton className=\"h-8 w-64 mb-2\" />\n            <Skeleton className=\"h-4 w-96\" />\n          </div>\n          <div className=\"flex gap-2\">\n            <Skeleton className=\"h-10 w-32\" />\n            <Skeleton className=\"h-10 w-32\" />\n          </div>\n        </div>\n\n        <div className=\"space-y-4\">\n          {Array(5).fill(0).map((_, index) => (\n            <Card key={index}>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-4\">\n                    <Skeleton className=\"h-12 w-12 rounded-full\" />\n                    <div>\n                      <Skeleton className=\"h-5 w-48 mb-2\" />\n                      <Skeleton className=\"h-4 w-32\" />\n                    </div>\n                  </div>\n                  <Skeleton className=\"h-8 w-20\" />\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  // Render error state\n  if (error) {\n    return (\n      <Alert variant=\"destructive\" className=\"mb-6\">\n        <AlertCircle className=\"h-4 w-4\" />\n        <AlertTitle>Error loading detection history</AlertTitle>\n        <AlertDescription>\n          {error}\n          <Button variant=\"outline\" size=\"sm\" className=\"ml-2\" onClick={handleRefresh}>\n            <RefreshCw className=\"h-4 w-4 mr-1\" />\n            Retry\n          </Button>\n        </AlertDescription>\n      </Alert>\n    );\n  }\n\n  // Render empty state\n  if (detectionHistory.length === 0) {\n    return (\n      <div className=\"flex flex-col items-center justify-center py-12 text-center\">\n        <div className=\"rounded-full bg-muted p-6 mb-4\">\n          <Leaf className=\"h-10 w-10 text-muted-foreground\" />\n        </div>\n        <h2 className=\"text-2xl font-semibold mb-2\">No detection history found</h2>\n        <p className=\"text-muted-foreground mb-6\">Upload an image to detect crop diseases and build your history</p>\n        <Button onClick={() => window.location.href = '/crop-disease-detection'}>\n          <Leaf className=\"h-4 w-4 mr-2\" />\n          Start Detection\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col md:flex-row md:items-center justify-between gap-4\">\n        <div>\n          <h1 className=\"text-2xl font-bold\" role=\"heading\" aria-level=\"1\">Disease Detection History</h1>\n          <p className=\"text-muted-foreground\">\n            Track your crop disease detections and treatment progress\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button variant=\"outline\" onClick={handleRefresh} disabled={isDetecting}>\n            <RefreshCw className={`h-4 w-4 mr-2 ${isDetecting ? 'animate-spin' : ''}`} />\n            Refresh\n          </Button>\n          <Button \n            variant=\"outline\" \n            onClick={handleExportHistory} \n            disabled={isExporting || detectionHistory.length === 0}\n          >\n            <Download className=\"h-4 w-4 mr-2\" />\n            {isExporting ? 'Exporting...' : 'Export CSV'}\n          </Button>\n        </div>\n      </div>\n\n      {/* Filters and Search */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-2 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search diseases, crops...\"\n                className=\"pl-8\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                aria-label=\"Search detection history\"\n              />\n            </div>\n            <Select value={sortBy} onValueChange={(value: SortOption) => setSortBy(value)}>\n              <SelectTrigger aria-label=\"Sort by\">\n                <SelectValue placeholder=\"Sort by\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"newest\">Newest First</SelectItem>\n                <SelectItem value=\"oldest\">Oldest First</SelectItem>\n                <SelectItem value=\"confidence\">Highest Confidence</SelectItem>\n                <SelectItem value=\"severity\">Highest Severity</SelectItem>\n              </SelectContent>\n            </Select>\n            <Select value={filterBy} onValueChange={(value: FilterOption) => setFilterBy(value)}>\n              <SelectTrigger aria-label=\"Filter by status\">\n                <SelectValue placeholder=\"Filter by status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Status</SelectItem>\n                <SelectItem value=\"pending\">Pending</SelectItem>\n                <SelectItem value=\"confirmed\">Confirmed</SelectItem>\n                <SelectItem value=\"treated\">Treated</SelectItem>\n              </SelectContent>\n            </Select>\n            <div className=\"text-sm text-muted-foreground flex items-center\">\n              <Filter className=\"h-4 w-4 mr-1\" />\n              {filteredAndSortedHistory.length} of {detectionHistory.length} records\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* History List */}\n      <div className=\"space-y-4\">\n        {filteredAndSortedHistory.map((detection) => {\n          const statusConfig = getStatusConfig(detection.status);\n          const severityConfig = getSeverityConfig(detection.result_data.severity);\n          const StatusIcon = statusConfig.icon;\n\n          return (\n            <Card key={detection.id} className=\"hover:shadow-md transition-shadow\" data-testid=\"detection-item\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex items-start gap-4 flex-1\">\n                    {/* Disease Image or Icon */}\n                    <div className=\"flex-shrink-0\">\n                      {detection.image_url ? (\n                        <img\n                          src={detection.image_url}\n                          alt={`${detection.disease_name} detection`}\n                          className=\"w-16 h-16 rounded-lg object-cover\"\n                        />\n                      ) : (\n                        <div className=\"w-16 h-16 rounded-lg bg-muted flex items-center justify-center\">\n                          <Leaf className=\"h-8 w-8 text-muted-foreground\" />\n                        </div>\n                      )}\n                    </div>\n\n                    {/* Detection Details */}\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"flex items-start justify-between mb-2\">\n                        <div>\n                          <h3 className=\"font-semibold text-lg\">{detection.disease_name}</h3>\n                          <div className=\"flex items-center gap-2 mt-1\">\n                            <Badge variant=\"outline\">\n                              <Leaf className=\"h-3 w-3 mr-1\" />\n                              {detection.crop_type}\n                            </Badge>\n                            <Badge className={`${severityConfig.bgColor} ${severityConfig.color}`}>\n                              {severityConfig.label} Severity\n                            </Badge>\n                            <Badge variant=\"secondary\">\n                              {detection.confidence}% Confidence\n                            </Badge>\n                          </div>\n                        </div>\n                        <div className={`flex items-center gap-1 px-2 py-1 rounded-full ${statusConfig.bgColor}`}>\n                          <StatusIcon className={`h-3 w-3 ${statusConfig.color}`} />\n                          <span className={`text-xs font-medium ${statusConfig.color}`} data-status={detection.status}>\n                            {statusConfig.label}\n                          </span>\n                        </div>\n                      </div>\n\n                      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm text-muted-foreground mb-3\">\n                        <div className=\"flex items-center gap-1\" data-testid=\"detection-date\">\n                          <Calendar className=\"h-3 w-3\" />\n                          {new Date(detection.created_at).toLocaleDateString('en-US', {\n                            year: 'numeric',\n                            month: 'short',\n                            day: 'numeric',\n                            hour: '2-digit',\n                            minute: '2-digit'\n                          })}\n                        </div>\n                        {detection.field_name && (\n                          <div className=\"flex items-center gap-1\">\n                            <MapPin className=\"h-3 w-3\" />\n                            {detection.field_name}\n                          </div>\n                        )}\n                        <div className=\"flex items-center gap-1\">\n                          <DollarSign className=\"h-3 w-3\" />\n                          Treatment: ${detection.result_data.economic_impact.treatment_cost_usd}\n                        </div>\n                      </div>\n\n                      {/* Economic Impact Summary */}\n                      <div className=\"flex items-center gap-4 text-sm\">\n                        <div className=\"flex items-center gap-1 text-red-600\">\n                          <TrendingDown className=\"h-3 w-3\" />\n                          <span>Potential Loss: ${detection.result_data.economic_impact.revenue_loss_usd}</span>\n                        </div>\n                        <div className=\"flex items-center gap-1 text-orange-600\">\n                          <AlertTriangle className=\"h-3 w-3\" />\n                          <span>Yield Loss: {detection.result_data.economic_impact.yield_loss_percentage}%</span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Actions */}\n                  <div className=\"flex items-center gap-2 ml-4\">\n                    <Dialog>\n                      <DialogTrigger asChild>\n                        <Button variant=\"outline\" size=\"sm\">\n                          <Eye className=\"h-4 w-4 mr-1\" />\n                          View\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n                        <DialogHeader>\n                          <DialogTitle>Detection Details</DialogTitle>\n                          <DialogDescription>\n                            Complete analysis for {detection.disease_name} detected on {new Date(detection.created_at).toLocaleDateString()}\n                          </DialogDescription>\n                        </DialogHeader>\n                        <DiseaseDetectionResult\n                          result={detection.result_data}\n                          showImage={true}\n                          imageUrl={detection.image_url}\n                        />\n                      </DialogContent>\n                    </Dialog>\n\n                    <Dialog>\n                      <DialogTrigger asChild>\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\" \n                          disabled={isDeleting === detection.id}\n                          className=\"text-red-600 hover:text-red-700\"\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent>\n                        <DialogHeader>\n                          <DialogTitle>Delete Detection Record</DialogTitle>\n                          <DialogDescription>\n                            Are you sure you want to delete this detection record? This action cannot be undone.\n                          </DialogDescription>\n                        </DialogHeader>\n                        <DialogFooter>\n                          <Button variant=\"outline\">Cancel</Button>\n                          <Button \n                            variant=\"destructive\" \n                            onClick={() => handleDeleteDetection(detection.id)}\n                            disabled={isDeleting === detection.id}\n                          >\n                            {isDeleting === detection.id ? 'Deleting...' : 'Delete'}\n                          </Button>\n                        </DialogFooter>\n                      </DialogContent>\n                    </Dialog>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      {/* No Results */}\n      {filteredAndSortedHistory.length === 0 && detectionHistory.length > 0 && (\n        <div className=\"text-center py-12\">\n          <Search className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n          <h3 className=\"text-lg font-semibold mb-2\">No matching records found</h3>\n          <p className=\"text-muted-foreground mb-4\">Try adjusting your search or filter criteria</p>\n          <Button \n            variant=\"outline\" \n            onClick={() => {\n              setSearchQuery('');\n              setFilterBy('all');\n              setSortBy('newest');\n            }}\n          >\n            Clear Filters\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n}"