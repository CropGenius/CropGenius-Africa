/**\n * ðŸŒ¾ INFINITY-LEVEL DiseaseDetectionResult Component\n * \n * PRODUCTION-READY component for displaying crop disease detection results\n * with WORLD-CLASS UI/UX for 100 million African farmers! ðŸš€\n */\n\nimport React, { useState } from 'react';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Progress } from '@/components/ui/progress';\nimport { Separator } from '@/components/ui/separator';\nimport { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';\nimport { \n  AlertTriangle, \n  CheckCircle, \n  Clock, \n  DollarSign, \n  Leaf, \n  MapPin, \n  Phone, \n  Shield, \n  TrendingDown, \n  TrendingUp,\n  Zap,\n  Copy,\n  Share2,\n  Download,\n  Eye,\n  EyeOff\n} from 'lucide-react';\nimport { useToast } from '@/components/ui/use-toast';\nimport { DiseaseDetectionResult as DiseaseDetectionResultType } from '@/agents/CropDiseaseOracle';\n\nexport interface DiseaseDetectionResultData extends DiseaseDetectionResultType {}\n\ninterface DiseaseDetectionResultProps {\n  result: DiseaseDetectionResultData;\n  showImage?: boolean;\n  imageUrl?: string;\n  onSaveToHistory?: () => void;\n  onShareResult?: () => void;\n  className?: string;\n}\n\n/**\n * INFINITY-LEVEL Disease Detection Result Display Component\n */\nexport const DiseaseDetectionResult: React.FC<DiseaseDetectionResultProps> = ({\n  result,\n  showImage = false,\n  imageUrl,\n  onSaveToHistory,\n  onShareResult,\n  className = ''\n}) => {\n  const [showFullDetails, setShowFullDetails] = useState(false);\n  const { toast } = useToast();\n\n  // Get severity color and icon\n  const getSeverityConfig = (severity: string) => {\n    switch (severity) {\n      case 'critical':\n        return { color: 'bg-red-500', textColor: 'text-red-700', icon: AlertTriangle, bgColor: 'bg-red-50' };\n      case 'high':\n        return { color: 'bg-orange-500', textColor: 'text-orange-700', icon: AlertTriangle, bgColor: 'bg-orange-50' };\n      case 'medium':\n        return { color: 'bg-yellow-500', textColor: 'text-yellow-700', icon: Clock, bgColor: 'bg-yellow-50' };\n      case 'low':\n        return { color: 'bg-green-500', textColor: 'text-green-700', icon: CheckCircle, bgColor: 'bg-green-50' };\n      default:\n        return { color: 'bg-gray-500', textColor: 'text-gray-700', icon: Shield, bgColor: 'bg-gray-50' };\n    }\n  };\n\n  const severityConfig = getSeverityConfig(result.severity);\n  const SeverityIcon = severityConfig.icon;\n\n  // Handle copy to clipboard\n  const handleCopyResult = async () => {\n    const resultText = `\nCrop Disease Detection Result\n=============================\nDisease: ${result.disease_name}\nConfidence: ${result.confidence}%\nSeverity: ${result.severity.toUpperCase()}\nCrop: ${result.crop_type}\n\nImmediate Actions:\n${result.immediate_actions.map(action => `â€¢ ${action}`).join('\\n')}\n\nTreatment Cost: $${result.economic_impact.treatment_cost_usd}\nPotential Loss: $${result.economic_impact.revenue_loss_usd}\n\nGenerated by CropGenius AI\n`;\n    \n    try {\n      await navigator.clipboard.writeText(resultText);\n      toast({\n        title: \"Result Copied!\",\n        description: \"Disease detection result copied to clipboard\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Copy Failed\",\n        description: \"Unable to copy result to clipboard\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Handle save to history\n  const handleSaveToHistory = () => {\n    if (onSaveToHistory) {\n      onSaveToHistory();\n    }\n    toast({\n      title: \"Saved to History\",\n      description: \"Detection result saved to your history\",\n    });\n  };\n\n  // Handle share result\n  const handleShareResult = () => {\n    if (onShareResult) {\n      onShareResult();\n    } else {\n      // Fallback to Web Share API\n      if (navigator.share) {\n        navigator.share({\n          title: `Crop Disease Detection: ${result.disease_name}`,\n          text: `Detected ${result.disease_name} with ${result.confidence}% confidence. Treatment needed.`,\n          url: window.location.href,\n        });\n      } else {\n        handleCopyResult();\n      }\n    }\n  };\n\n  return (\n    <div className={`space-y-6 ${className}`}>\n      {/* Main Result Card */}\n      <Card className={`border-l-4 ${severityConfig.color.replace('bg-', 'border-l-')}`}>\n        <CardHeader className={severityConfig.bgColor}>\n          <div className=\"flex items-start justify-between\">\n            <div className=\"flex items-center gap-3\">\n              <div className={`p-2 rounded-full ${severityConfig.color}`}>\n                <SeverityIcon className=\"h-6 w-6 text-white\" />\n              </div>\n              <div>\n                <CardTitle className=\"text-2xl font-bold\">{result.disease_name}</CardTitle>\n                {result.scientific_name && (\n                  <CardDescription className=\"text-sm italic mt-1\">\n                    {result.scientific_name}\n                  </CardDescription>\n                )}\n                <div className=\"flex items-center gap-4 mt-2\">\n                  <Badge variant=\"outline\" className={severityConfig.textColor}>\n                    {result.severity.toUpperCase()} SEVERITY\n                  </Badge>\n                  <Badge variant=\"secondary\">\n                    {result.confidence}% CONFIDENCE\n                  </Badge>\n                  {result.crop_type && (\n                    <Badge variant=\"outline\">\n                      <Leaf className=\"h-3 w-3 mr-1\" />\n                      {result.crop_type}\n                    </Badge>\n                  )}\n                </div>\n              </div>\n            </div>\n            <div className=\"flex gap-2\">\n              <Button variant=\"ghost\" size=\"sm\" onClick={handleCopyResult}>\n                <Copy className=\"h-4 w-4\" />\n              </Button>\n              <Button variant=\"ghost\" size=\"sm\" onClick={handleShareResult}>\n                <Share2 className=\"h-4 w-4\" />\n              </Button>\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                onClick={() => setShowFullDetails(!showFullDetails)}\n              >\n                {showFullDetails ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n\n        <CardContent className=\"pt-6\">\n          {/* Image Display */}\n          {showImage && imageUrl && (\n            <div className=\"mb-6\">\n              <img\n                src={imageUrl}\n                alt={`Detected ${result.disease_name}`}\n                className=\"w-full max-w-md mx-auto rounded-lg shadow-md\"\n              />\n            </div>\n          )}\n\n          {/* Confidence and Affected Area */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\">\n            <div>\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-sm font-medium\">Detection Confidence</span>\n                <span className=\"text-sm font-bold\">{result.confidence}%</span>\n              </div>\n              <Progress value={result.confidence} className=\"h-2\" />\n            </div>\n            {result.affected_area_percentage && (\n              <div>\n                <div className=\"flex items-center justify-between mb-2\">\n                  <span className=\"text-sm font-medium\">Affected Area</span>\n                  <span className=\"text-sm font-bold\">{result.affected_area_percentage}%</span>\n                </div>\n                <Progress value={result.affected_area_percentage} className=\"h-2\" />\n              </div>\n            )}\n          </div>\n\n          {/* Economic Impact Alert */}\n          <Alert className=\"mb-6\">\n            <DollarSign className=\"h-4 w-4\" />\n            <AlertTitle>Economic Impact Analysis</AlertTitle>\n            <AlertDescription>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mt-3\">\n                <div className=\"flex items-center gap-2\">\n                  <TrendingDown className=\"h-4 w-4 text-red-500\" />\n                  <div>\n                    <div className=\"text-xs text-muted-foreground\">Potential Yield Loss</div>\n                    <div className=\"font-semibold\">{result.economic_impact.yield_loss_percentage}%</div>\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <DollarSign className=\"h-4 w-4 text-red-500\" />\n                  <div>\n                    <div className=\"text-xs text-muted-foreground\">Revenue Loss</div>\n                    <div className=\"font-semibold\">${result.economic_impact.revenue_loss_usd}</div>\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Zap className=\"h-4 w-4 text-blue-500\" />\n                  <div>\n                    <div className=\"text-xs text-muted-foreground\">Treatment Cost</div>\n                    <div className=\"font-semibold\">${result.economic_impact.treatment_cost_usd}</div>\n                  </div>\n                </div>\n              </div>\n            </AlertDescription>\n          </Alert>\n\n          {/* Immediate Actions */}\n          <Alert className=\"mb-6 border-orange-200 bg-orange-50\">\n            <AlertTriangle className=\"h-4 w-4 text-orange-600\" />\n            <AlertTitle className=\"text-orange-800\">Immediate Actions Required</AlertTitle>\n            <AlertDescription>\n              <ul className=\"mt-2 space-y-1\">\n                {result.immediate_actions.map((action, index) => (\n                  <li key={index} className=\"flex items-start gap-2\">\n                    <span className=\"text-orange-600 mt-1\">â€¢</span>\n                    <span className=\"text-orange-700\">{action}</span>\n                  </li>\n                ))}\n              </ul>\n            </AlertDescription>\n          </Alert>\n        </CardContent>\n\n        <CardFooter className=\"flex gap-2\">\n          <Button onClick={handleSaveToHistory} className=\"flex-1\">\n            <Download className=\"h-4 w-4 mr-2\" />\n            Save to History\n          </Button>\n          <Button variant=\"outline\" onClick={handleShareResult}>\n            <Share2 className=\"h-4 w-4 mr-2\" />\n            Share\n          </Button>\n        </CardFooter>\n      </Card>\n\n      {/* Detailed Information Tabs */}\n      {showFullDetails && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Detailed Treatment Information</CardTitle>\n            <CardDescription>\n              Comprehensive treatment and prevention guidance\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Tabs defaultValue=\"treatment\" className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-4\">\n                <TabsTrigger value=\"treatment\">Treatment</TabsTrigger>\n                <TabsTrigger value=\"prevention\">Prevention</TabsTrigger>\n                <TabsTrigger value=\"suppliers\">Suppliers</TabsTrigger>\n                <TabsTrigger value=\"timeline\">Timeline</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"treatment\" className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div>\n                    <h4 className=\"font-semibold text-green-700 mb-3 flex items-center gap-2\">\n                      <Leaf className=\"h-4 w-4\" />\n                      Organic Solutions\n                    </h4>\n                    <ul className=\"space-y-2\">\n                      {result.organic_solutions.map((solution, index) => (\n                        <li key={index} className=\"flex items-start gap-2\">\n                          <CheckCircle className=\"h-4 w-4 text-green-500 mt-0.5 flex-shrink-0\" />\n                          <span className=\"text-sm\">{solution}</span>\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold text-blue-700 mb-3 flex items-center gap-2\">\n                      <Zap className=\"h-4 w-4\" />\n                      Chemical Solutions\n                    </h4>\n                    <ul className=\"space-y-2\">\n                      {result.inorganic_solutions.map((solution, index) => (\n                        <li key={index} className=\"flex items-start gap-2\">\n                          <CheckCircle className=\"h-4 w-4 text-blue-500 mt-0.5 flex-shrink-0\" />\n                          <span className=\"text-sm\">{solution}</span>\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                </div>\n                \n                <Separator />\n                \n                <div>\n                  <h4 className=\"font-semibold mb-3\">Recommended Products</h4>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2\">\n                    {result.recommended_products.map((product, index) => (\n                      <Badge key={index} variant=\"outline\" className=\"justify-start p-2\">\n                        {product}\n                      </Badge>\n                    ))}\n                  </div>\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"prevention\" className=\"space-y-4\">\n                <h4 className=\"font-semibold mb-3\">Prevention Measures</h4>\n                <ul className=\"space-y-3\">\n                  {result.preventive_measures.map((measure, index) => (\n                    <li key={index} className=\"flex items-start gap-3\">\n                      <Shield className=\"h-5 w-5 text-green-500 mt-0.5 flex-shrink-0\" />\n                      <div>\n                        <span className=\"font-medium\">{measure}</span>\n                      </div>\n                    </li>\n                  ))}\n                </ul>\n              </TabsContent>\n\n              <TabsContent value=\"suppliers\" className=\"space-y-4\">\n                <h4 className=\"font-semibold mb-3\">Local Suppliers</h4>\n                {result.local_suppliers.length > 0 ? (\n                  <div className=\"grid gap-4\">\n                    {result.local_suppliers.map((supplier, index) => (\n                      <Card key={index} className=\"p-4\">\n                        <div className=\"flex items-start justify-between\">\n                          <div>\n                            <h5 className=\"font-semibold\">{supplier.name}</h5>\n                            <div className=\"flex items-center gap-4 mt-2 text-sm text-muted-foreground\">\n                              <div className=\"flex items-center gap-1\">\n                                <MapPin className=\"h-3 w-3\" />\n                                {supplier.location} ({supplier.distance_km}km)\n                              </div>\n                              <div className=\"flex items-center gap-1\">\n                                <Phone className=\"h-3 w-3\" />\n                                {supplier.contact}\n                              </div>\n                            </div>\n                            <div className=\"mt-2\">\n                              <span className=\"text-xs font-medium\">Available Products:</span>\n                              <div className=\"flex flex-wrap gap-1 mt-1\">\n                                {supplier.products_available.map((product, pIndex) => (\n                                  <Badge key={pIndex} variant=\"secondary\" className=\"text-xs\">\n                                    {product}\n                                  </Badge>\n                                ))}\n                              </div>\n                            </div>\n                          </div>\n                          <Badge variant=\"outline\">{supplier.price_range}</Badge>\n                        </div>\n                      </Card>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    <MapPin className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                    <p>No local suppliers found. Contact your local agricultural extension office.</p>\n                  </div>\n                )}\n              </TabsContent>\n\n              <TabsContent value=\"timeline\" className=\"space-y-4\">\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center gap-3\">\n                    <Clock className=\"h-5 w-5 text-blue-500\" />\n                    <div>\n                      <h4 className=\"font-semibold\">Recovery Timeline</h4>\n                      <p className=\"text-muted-foreground\">{result.recovery_timeline}</p>\n                    </div>\n                  </div>\n                  \n                  <Separator />\n                  \n                  <div className=\"flex items-center gap-3\">\n                    <TrendingUp className=\"h-5 w-5 text-orange-500\" />\n                    <div>\n                      <h4 className=\"font-semibold\">Spread Risk</h4>\n                      <Badge \n                        variant={result.spread_risk === 'high' ? 'destructive' : \n                                result.spread_risk === 'medium' ? 'default' : 'secondary'}\n                      >\n                        {result.spread_risk.toUpperCase()} RISK\n                      </Badge>\n                    </div>\n                  </div>\n                  \n                  <Separator />\n                  \n                  <div className=\"text-xs text-muted-foreground\">\n                    <p>Analysis generated on {new Date(result.timestamp).toLocaleString()}</p>\n                    <p>Source: {result.source_api.toUpperCase()} API</p>\n                  </div>\n                </div>\n              </TabsContent>\n            </Tabs>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n};\n\nexport default DiseaseDetectionResult;"