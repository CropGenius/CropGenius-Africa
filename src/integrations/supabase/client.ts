
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import { Database } from '@/types/supabase';

const SUPABASE_URL = "https://bapqlyvfwxsichlyjxpd.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJhcHFseXZmd3hzaWNobHlqeHBkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDE3MDgyMzIsImV4cCI6MjA1NzI4NDIzMn0.hk2D1tvqIM7id40ajPE9_2xtAIC7_thqQN9m0b_4m5g";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true, // Critical for OAuth redirects
    storageKey: 'cropgenius-auth', // Consistent storage key
    storage: localStorage, // Explicitly use localStorage
    flowType: 'pkce', // Use PKCE for added security
  },
  realtime: {
    params: {
      eventsPerSecond: 10
    }
  },
  global: {
    headers: {
      'x-application-name': 'CROPGenius',
    },
    fetch: fetch.bind(globalThis)
  },
});

// Debugging helper
export const logAuthState = async () => {
  // TODO: re-enable auth
  console.log("[DEV] Auth Debug: Using development mock user");
  return { 
    data: { 
      session: { 
        user: { id: "dev-user-id-123456" }
      } 
    }, 
    error: null 
  };
  
  /* Original implementation
  const { data, error } = await supabase.auth.getSession();
  console.log("[Auth Debug] Current session:", data.session?.user?.id || "None", error);
  return { data, error };
  */
};

// Add function to refresh token proactively
export const proactiveTokenRefresh = async () => {
  // TODO: re-enable auth
  console.log("[DEV] Token refresh bypassed for development");
  return true;
  
  /* Original implementation
  try {
    const { data, error } = await supabase.auth.refreshSession();
    if (error) {
      console.error("[Auth] Token refresh failed:", error.message);
      return false;
    }
    if (data.session) {
      console.log("[Auth] Token refreshed successfully");
      return true;
    }
    return false;
  } catch (err) {
    console.error("[Auth] Error during token refresh:", err);
    return false;
  }
  */
};

// Helper to extract user metadata from session
export const getUserMetadata = async () => {
  // TODO: re-enable auth
  console.log("[DEV] Using mock user metadata");
  return {
    id: "dev-user-id-123456",
    email: "dev@cropgenius.ai",
    metadata: { full_name: "CropGenius Dev" }
  };
  
  /* Original implementation
  const { data, error } = await supabase.auth.getSession();
  if (error || !data.session?.user) {
    return null;
  }
  
  return {
    id: data.session.user.id,
    email: data.session.user.email,
    metadata: data.session.user.user_metadata
  };
  */
};

// Check session expiry and refresh if needed
export const checkAndRefreshSession = async () => {
  // TODO: re-enable auth
  console.log("[DEV] Session check bypassed for development");
  return true;
  
  /* Original implementation
  try {
    // Get current session
    const { data: sessionData } = await supabase.auth.getSession();
    const session = sessionData.session;
    
    if (!session) {
      console.log("[Auth] No session to refresh");
      return false;
    }
    
    // Calculate time until expiry
    const expiresAt = session.expires_at ? new Date(session.expires_at * 1000) : null;
    if (expiresAt) {
      const timeUntilExpiry = expiresAt.getTime() - Date.now();
      console.log(`[Auth] Session expires in ${Math.round(timeUntilExpiry / 60000)} minutes`);
      
      // If expires in less than 10 minutes, refresh
      if (timeUntilExpiry < 600000) { // 10 minutes
        return await proactiveTokenRefresh();
      }
    }
    
    return true;
  } catch (err) {
    console.error("[Auth] Error checking session:", err);
    return false;
  }
  */
};
